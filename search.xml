<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>重邮程序设计复试真题(部分)</title>
    <url>/2021/02/04/2015%E5%B9%B4%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E8%AF%95%E7%9C%9F%E9%A2%98/</url>
    <content><![CDATA[<p>2015年：</p>
<ol>
<li>求num各数字之和；</li>
<li>测试字符C在字符号串S中出现的次数；</li>
<li>中国有句俗话叫“三天打鱼两天晒网”。某人1990年1月1日起开始“三天打鱼两天晒网”，问这个人在以后的某一天中是打鱼还是晒网</li>
</ol>
<p>2017年：</p>
<ol>
<li>选择分支结构，注意ceil函数</li>
<li>汉诺塔问题</li>
<li>字符串交换问题：字符串以A开头和以K结尾的单词进行交换</li>
<li>百钱买百鸡问题：百鸡问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？</li>
<li>最大约数辗转相除法；</li>
<li>文件操作：将数据写入fname.txt中</li>
<li>螺旋方阵</li>
<li>求方程组近似根：弦截法</li>
<li>斐波那契数列递归实现</li>
</ol>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>F021程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax原理和使用</title>
    <url>/2021/01/15/Ajax%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<ol>
<li><h4 id="http介绍"><a href="#http介绍" class="headerlink" title="http介绍"></a>http介绍</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;HTTP基于TCP,是面向连接的协议，建立需要通过<strong>三次握手</strong>，断开需要通过<strong>四次挥手</strong>。<br>&nbsp;&nbsp;&nbsp;&nbsp;当连接断开时，客户端的<strong>最后一次挥手</strong>后会等待两个单位时间，若两个单位时间内没有收到任何响应，说明服务器关闭了，然后客户端也关闭；若两个单位时间内又收到了消息，说明服务器还没有关，客户端和服务端将继续沟通。<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210115125141.PNG"></p>
</li>
<li><h4 id="http协议的构成"><a href="#http协议的构成" class="headerlink" title="http协议的构成"></a>http协议的构成</h4></li>
</ol>
<p><strong>请求</strong>：</p>
<ul>
<li>请求头–request header<ul>
<li>URL</li>
<li>method</li>
<li>query</li>
</ul>
</li>
<li>请求体–request body</li>
</ul>
<p><strong>响应</strong>：</p>
<ul>
<li>响应头–request header<ul>
<li>content-type</li>
</ul>
</li>
<li>响应体–response body<ul>
<li>响应数据</li>
</ul>
</li>
</ul>
<p>当是<code>get</code>请求时,信息在<code>URL</code>中；当是<code>post</code>请求时，信息在<code>request body</code>中。<br><code>content-type</code>中表示返回的数据类型，返回的数据在<code>response body </code>中。</p>
<ol start="3">
<li><h4 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h4>&nbsp;&nbsp;&nbsp;&nbsp;同步:代码按照前后顺序一行一行的执行；<br>&nbsp;&nbsp;&nbsp;&nbsp;异步：同时执行多行代码；<br>&nbsp;&nbsp;&nbsp;&nbsp;注：异步代码总是在同步代码之后执行；</li>
</ol>
<p>&nbsp;&nbsp;&nbsp;&nbsp;现在的前后端交互采取前后端分离，我们会采用异步的JavaScript和XML或JSON格式来完成数据的局部刷新。因为它是异步的，所以不等待整需要个页面的刷新，只需要发送一个异步请求，什么时候请求的内容过来了，什么时候刷新局部页面</p>
<ol start="4">
<li><h4 id="Ajax介绍"><a href="#Ajax介绍" class="headerlink" title="Ajax介绍"></a>Ajax介绍</h4>&nbsp;&nbsp;&nbsp;&nbsp;传统的项目前后端不分离，用户触发一个http请求服务器，然后服务器收到之后再做出响应给用户，并且返回一个新的页面，也就是说交互都是通过页面刷新或页面跳转来实现的。</li>
</ol>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这种方式对于用户体验来讲其实并不友好，少量的数据更新也会引发整个页面重新请求，浪费了很大一部分资源。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;因此，我们希望有一种更好的方式，可以不用重新请求整个页面而达到更新部分数据的效果。<em>2005年，ajax(Asynchronous JavaScript And XML)出现，给前端带来了巨大的变化与革新。</em></p>
<ol start="5">
<li><h4 id="Ajax的特点"><a href="#Ajax的特点" class="headerlink" title="Ajax的特点"></a>Ajax的特点</h4>优点：</li>
</ol>
<ul>
<li>不需要插件支持（一般浏览器且默认开启JavaScript即可）</li>
<li>用户体验极佳（不刷新页面即可获取可更新的数据）</li>
<li>提升Web程序的性能（在传递数据方面做到按需发送，不必整体提交）</li>
<li>减轻服务器和带宽的负担（将服务区的一些操作转移到客户端）</li>
</ul>
<p>缺点：</p>
<ul>
<li>前进、后退功能被破坏（因为Ajax永远在当前页面，不会记录前后页面）</li>
<li>搜索引擎的支持度不够（因为搜索引擎爬虫还不能理解JS引起变化数据的内容）</li>
</ul>
<ol start="6">
<li><h4 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h4></li>
</ol>
<ul>
<li>100-199：表示连接继续</li>
<li>200-299：表示各种意义上的成功</li>
<li>300-399：表示重定向</li>
<li>400-499：表示各种客户端错误</li>
<li>500-599：表示各种服务端错误</li>
</ul>
<ol start="7">
<li><h4 id="Ajax原理"><a href="#Ajax原理" class="headerlink" title="Ajax原理"></a>Ajax原理</h4>&nbsp;&nbsp;&nbsp;&nbsp;1.准备页面请求，创建XMLHttpRequest对象<br>&nbsp;&nbsp;&nbsp;&nbsp;2.使用XMLHttpRequest对象的open()和send()方法发送资源请求给服务器<br>&nbsp;&nbsp;&nbsp;&nbsp;3.后台计算<br>&nbsp;&nbsp;&nbsp;&nbsp;4.onreadystatechange函数，状态改变时发送数据回客户端，使用XMLHttpRequest对象的responseText或responseXML属性获得服务器的响应</li>
</ol>
<p>&nbsp;&nbsp;&nbsp;&nbsp;注：open()打开连接，send()向服务器发送资源;调用send()方法后要去监听onreadystatechange事件，当onreadystatechange状态改变时，说明后端发送数据给客户端，客户端接收数据。</p>
<ol start="8">
<li><h4 id="Ajax-get"><a href="#Ajax-get" class="headerlink" title="Ajax(get)"></a>Ajax(get)</h4>具体流程看注释</li>
</ol>
<p>client代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="function"><span class="keyword">function</span> <span class="title">sendMsg</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 1.创建一个XMLHttpRequest对象</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">			<span class="comment">// 2.调用open方法打开连接</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// open方法有三个参数</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// 1.请求的method</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// 2.请求的url</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">// 3.是否异步，默认值为true</span></span></span><br><span class="line"><span class="javascript">			xhr.open(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://127.0.0.1/data.php?id=1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">			<span class="comment">//3.发送请求</span></span></span><br><span class="line">			xhr.send();</span><br><span class="line"><span class="javascript">			<span class="comment">//4.监听状态的改变</span></span></span><br><span class="line"><span class="javascript">			xhr.onreadystatechange=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="comment">// 判断状态值 0-4 五种状态，4代表最终的完成</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 判断状态码</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="javascript">						<span class="comment">//将返回的字符串转换成json对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> resp=<span class="built_in">JSON</span>.parse(xhr.responseText);</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(resp);</span></span><br><span class="line"><span class="javascript">						<span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>).innerHTML=<span class="string">`</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">h2</span>&gt;</span>编号：$&#123;resp.id&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题：$&#123;resp.title&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>`		</span></span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>server代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 解决跨域问题</span></span><br><span class="line">header(<span class="string">&quot;Access-Control-Allow-Origin:*&quot;</span>);</span><br><span class="line">header(<span class="string">&#x27;Access-Control-Allow-Methods:POST&#x27;</span>);</span><br><span class="line">header(<span class="string">&#x27;Access-Control-Allow-Headers:x-requested-with, content-type&#x27;</span>);</span><br><span class="line"><span class="comment">//获取客户端get请求过来的数据</span></span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">//转换成json格式</span></span><br><span class="line"><span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">&#x27;id&#x27;</span>=&gt;<span class="variable">$id</span>,<span class="string">&#x27;title&#x27;</span>=&gt;<span class="string">&#x27;Hello Ajax&#x27;</span>));</span><br></pre></td></tr></table></figure>
<ol start="8">
<li><h4 id="Ajax-post"><a href="#Ajax-post" class="headerlink" title="Ajax(post)"></a>Ajax(post)</h4>get请求和post请求有很多地方都相同，注意不同的地方(注释处)<br>client代码<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sendMsg</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// method为post</span></span></span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;http://127.0.0.1/data.php&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//设置请求头的content-type  指定了参数的发送方式</span></span></span><br><span class="line"><span class="javascript">        xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 在send里写需要发送的数据</span></span></span><br><span class="line"><span class="javascript">        xhr.send(<span class="string">&#x27;name=zhangsan&amp;age=18&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        xhr.onreadystatechange=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> resp=<span class="built_in">JSON</span>.parse(xhr.responseText);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(resp);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>).innerHTML=<span class="string">`</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：$&#123;resp.name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：$&#123;resp.age&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>`</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
server代码：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 解决跨域问题</span></span><br><span class="line">header(<span class="string">&quot;Access-Control-Allow-Origin:*&quot;</span>);</span><br><span class="line">header(<span class="string">&#x27;Access-Control-Allow-Methods:POST&#x27;</span>);</span><br><span class="line">header(<span class="string">&#x27;Access-Control-Allow-Headers:x-requested-with, content-type&#x27;</span>);</span><br><span class="line"><span class="comment">//获取客户端get请求过来的数据</span></span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$age</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line"><span class="comment">//转换成json格式</span></span><br><span class="line"><span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>=&gt;<span class="variable">$name</span>,<span class="string">&#x27;age&#x27;</span>=&gt;<span class="variable">$age</span>));</span><br></pre></td></tr></table></figure></li>
<li><h4 id="封装ajax-1"><a href="#封装ajax-1" class="headerlink" title="封装ajax(1)"></a>封装ajax(1)</h4>get封装：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sendMsg</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//若无参数query为null</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//若有参数，&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">        get(<span class="string">&#x27;http://127.0.0.1/data.php&#x27;</span>,&#123;<span class="attr">name</span>:<span class="string">&#x27;xiaoming&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(resp)</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">//封装get请求</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//query： string,请求的地址</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//query： Object,请求携带的参数</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//callback: function,成功之后的回调</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//isJSON: boolean,是否转化为json格式</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url,query,callback,isJSON</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//若有参数,先把参数拼接在url后面</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(query)&#123;</span></span><br><span class="line"><span class="javascript">            url+=<span class="string">&#x27;?&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> query)&#123;</span></span><br><span class="line"><span class="javascript">                url+=<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;query[key]&#125;</span>&amp;`</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">//取出最后多余的&amp;</span></span></span><br><span class="line">            url=url.slice(0,-1)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">&#x27;get&#x27;</span>,url)</span></span><br><span class="line">        xhr.send()</span><br><span class="line"><span class="javascript">        xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> res=isJSON?<span class="built_in">JSON</span>.parse(xhr.responseText):xhr.responseText</span></span><br><span class="line">                    callback(res)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
post封装<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sendMsg</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//若无参数query为null</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//若有参数，&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">        post(<span class="string">&#x27;http://127.0.0.1/data.php&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;xiaoming&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(resp)</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">//封装post请求</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//query： string,请求的地址</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//query： Object,请求携带的参数</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//callback: function,成功之后的回调</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//isJSON: boolean,是否转化为json格式</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url,query,callback,isJSON</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//若有参数,先把参数拼接起来</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> str=<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(query)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> query)&#123;</span></span><br><span class="line"><span class="javascript">                str+=<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;query[key]&#125;</span>&amp;`</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">//取出最后多余的&amp;</span></span></span><br><span class="line">            str=str.slice(0,-1)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">&#x27;post&#x27;</span>,url)</span></span><br><span class="line"><span class="javascript">        xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span></span><br><span class="line">        xhr.send(str)</span><br><span class="line"><span class="javascript">        xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> res=isJSON?<span class="built_in">JSON</span>.parse(xhr.responseText):xhr.responseText</span></span><br><span class="line">                    callback(res)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>注</strong>：测试时一定要注意，当前端发的方式和后端接受的方式不一样时，可能会报json格式错误</p>
<ol start="10">
<li><h4 id="ajax封装-2"><a href="#ajax封装-2" class="headerlink" title="ajax封装(2)"></a>ajax封装(2)</h4>创建util.js<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个util对象，切记对象内的数据之间要有逗号隔开</span></span><br><span class="line"><span class="keyword">var</span> util=&#123;</span><br><span class="line">    <span class="comment">//封装get</span></span><br><span class="line">    get:<span class="function"><span class="keyword">function</span> (<span class="params">url,query,callback,isJSON</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//若有参数,先把参数拼接起来</span></span><br><span class="line">        <span class="keyword">var</span> str=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(query)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> query)&#123;</span><br><span class="line">                str+=<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;query[key]&#125;</span>&amp;`</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//取出最后多余的&amp;</span></span><br><span class="line">            str=str.slice(<span class="number">0</span>,-<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        xhr.open(<span class="string">&#x27;post&#x27;</span>,url)</span><br><span class="line">        xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">        xhr.send(str)</span><br><span class="line">        xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> res=isJSON?<span class="built_in">JSON</span>.parse(xhr.responseText):xhr.responseText</span><br><span class="line">                    callback(res)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装post</span></span><br><span class="line">    post:<span class="function"><span class="keyword">function</span> (<span class="params">url,query,callback,isJSON</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//若有参数,先把参数拼接起来</span></span><br><span class="line">        <span class="keyword">var</span> str=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(query)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> query)&#123;</span><br><span class="line">                str+=<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;query[key]&#125;</span>&amp;`</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//取出最后多余的&amp;</span></span><br><span class="line">            str=str.slice(<span class="number">0</span>,-<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        xhr.open(<span class="string">&#x27;get&#x27;</span>,url)</span><br><span class="line">        xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">        xhr.send(str)</span><br><span class="line">        xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> res=isJSON?<span class="built_in">JSON</span>.parse(xhr.responseText):xhr.responseText</span><br><span class="line">                    callback(res)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用时</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button onclick=<span class="string">&quot;sendMsg()&quot;</span>&gt;发送请求&lt;/button&gt;</span><br><span class="line"><span class="comment">//先引入js文件,然后调用即可</span></span><br><span class="line">&lt;script src=<span class="string">&quot;./util.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sendMsg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//若无参数query为null</span></span><br><span class="line">        <span class="comment">//若有参数，&#123;&#125;</span></span><br><span class="line">        util.post(<span class="string">&#x27;http://127.0.0.1/data.php&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;xiaoming&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(resp)</span><br><span class="line">        &#125;,<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li><h4 id="ajax封装-3"><a href="#ajax封装-3" class="headerlink" title="ajax封装(3)"></a>ajax封装(3)</h4>server代码：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> util=&#123;</span><br><span class="line">    <span class="comment">//param : Object&#123;method,url,query,callback,isJSON&#125;</span></span><br><span class="line">    ajax:<span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        <span class="keyword">if</span>(params.method === <span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">            params.url+=<span class="string">&#x27;?&#x27;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> params.query)&#123;</span><br><span class="line">                params.url+=<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params.query[key]&#125;</span>&amp;`</span></span><br><span class="line">            &#125;</span><br><span class="line">            params.url=params.url.slice(<span class="number">0</span>,-<span class="number">1</span>)</span><br><span class="line">            xhr.open(<span class="string">&#x27;get&#x27;</span>,params.url)</span><br><span class="line">            xhr.send()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> str=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(params.query)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> params.query)&#123;</span><br><span class="line">                str+=<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params.query[key]&#125;</span>&amp;`</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//取出最后多余的&amp;</span></span><br><span class="line">            str=str.slice(<span class="number">0</span>,-<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        xhr.open(<span class="string">&#x27;post&#x27;</span>,params.url)</span><br><span class="line">        xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">        xhr.send(str)</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> resp=params.isJSON ? <span class="built_in">JSON</span>.parse(xhr.responseText) : xhr.responseText</span><br><span class="line">                    params.callback(resp)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
client代码<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMsg()&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./util.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sendMsg</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        util.ajax(&#123;</span><br><span class="line"><span class="javascript">        	method:<span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        	isJSON:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        	url:<span class="string">&#x27;http://127.0.0.1/data.php&#x27;</span>,</span></span><br><span class="line">        	query:&#123;</span><br><span class="line"><span class="javascript">        		<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;xiaoming&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        		<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span></span></span><br><span class="line">        	&#125;,</span><br><span class="line"><span class="javascript">        	callback:<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(resp)</span></span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;)   </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda安装库时遇到的坑</title>
    <url>/2021/01/13/Anaconda%E5%AE%89%E8%A3%85%E5%BA%93%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<ol>
<li>注意要在安装库文件的目录下使用cmd，然后用命令安装</li>
<li>当安装完库成功后,import库发现不存在,可能是因为库的安装路径不在当前Python库的搜索路径内,所以没被找到.<br>解决方法:<br>(1)把库的路径加入搜索路径内;<br>(2)当安装Anaconda使,自带了Python,因此删掉自己安装的Python后再重新安装库即可，这样就会自动安装在搜索目录下了(新手尽量只装一个Python)</li>
</ol>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言函数数组传值</title>
    <url>/2021/01/13/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84%E4%BC%A0%E5%80%BC/</url>
    <content><![CDATA[<p>C语言中,向函数传值的问题</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span>* number)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> number[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">	duplicate(number);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> *number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,number[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> number[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> number[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">	duplicate(number);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> number[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,number[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记(第二天)</title>
    <url>/2021/04/24/Java%E7%AC%94%E8%AE%B0(%E7%AC%AC%E4%BA%8C%E5%A4%A9)/</url>
    <content><![CDATA[<ol>
<li>String当中与获取有关的字符串<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">length:获取字符串长度；</span><br><span class="line">concat:连接两个字符串；</span><br><span class="line">charAt:获取指定索引位置的单个字符；</span><br><span class="line">indexOf:查找参数字符串在本字符串中首次出现的位置；</span><br></pre></td></tr></table></figure></li>
<li>字符串的截取办法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">substring(int index):截取从参数位置一直到字符串末尾，返回新的字符串；</span><br><span class="line">substring(int begin,int end):截取从begin到end的字符串；</span><br><span class="line">备注：[begin,end)</span><br></pre></td></tr></table></figure></li>
<li>string当中与转换相关的常用方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">toCharArray():将字符串拆分成为字符数组作为返回值；</span><br><span class="line">getBytes():获得当前字符串底层的字节数组；</span><br><span class="line">replace(oldString,newString):将所有出现的老字符串，替换成新的字符串并返回</span><br><span class="line">split():按照分割参数的规则，将字符串分成若干部分；</span><br></pre></td></tr></table></figure></li>
<li>static关键字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. static关键字修饰的内容属于类，而不属于对象本身；</span><br><span class="line">2. 用static修饰的变量称为静态变量，修饰的方法称为静态方法；</span><br><span class="line">3. 静态变量和静态方法可以用类名调用，也可以用对象名调用，但推荐用类名调用，因为静态变量和静态方法属于类，而不是对象；</span><br><span class="line">4. 成员方法可以调用静态变量和静态方法；但静态不能调用非静态；</span><br><span class="line">5. 静态代码块：当第一次用到本类时，静态代码块执行唯一的一次；静态内容总是由于非静态，所以静态代码块比构造方法先执行；</span><br><span class="line">6. 在静态方法中不能使用this关键字；</span><br></pre></td></tr></table></figure></li>
<li>Arrays相关常用方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Arrays.toString:将数组变成字符串，并加上[];</span><br><span class="line">2. Arrays.sort:将数组进行排序，数字按升序，字符串按字母升序；</span><br></pre></td></tr></table></figure></li>
<li>extends关键字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 在继承时，若父子变量名重名，则创建对象时，创建的类对象是谁就用谁，没有就向上找；</span><br><span class="line">2. 在java中只有单继承，没有多继承；</span><br><span class="line">3. 在java中可以多级继承；</span><br><span class="line">4. 无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找父类；</span><br></pre></td></tr></table></figure></li>
<li>重写<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.方法的名称一样，参数列表也一样</span><br><span class="line">2.方法覆盖重写的注意事项：</span><br><span class="line">    1.必须保证父子类之间的方法名称相同，参数列表也相同；</span><br><span class="line">    2.子类的返回值必须小于或等于父类方法的返回值范围；</span><br><span class="line">    3.子类方法的权限必须大于等于父类方法的权限修饰符；</span><br><span class="line">    备注：public&gt;protected&gt;default&gt;private </span><br></pre></td></tr></table></figure></li>
<li>super关键字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 使用super关键字访问父类的成员变量；</span><br><span class="line">2. 使用super关键字调用父类中的方法(当父类和子类方法名重名时)；</span><br><span class="line">3. 调用父类构造方法；</span><br><span class="line">4. super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。</span><br><span class="line">总结：super关键字的三种用法：</span><br><span class="line">1. 在子类的成员方法中，访问父类的成员变量；</span><br><span class="line">2. 在子类的成员方法中，访问父类的成员方法；</span><br><span class="line">3. 在子类的构造方法中，访问父类的构造方法；</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyecharts遇到的坑</title>
    <url>/2021/01/18/Pyecharts%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>因为Pyecharts高版本不兼容低版本的问题，相同的语法在不同的版本就可能会出现一个能正常运行而一个出现报错的情况<br>常见的有导包时就有可能出现错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar,Pie,Line <span class="comment"># 1.x版本的语法</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar,Pie,Line <span class="comment"># 0.5.x版本的语法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#若交换使用就会报错 </span></span><br></pre></td></tr></table></figure>
<p>还有</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bar_1 = Bar(<span class="string">&quot;每天被领劵的数量&quot;</span>,width=<span class="number">1500</span>,height=<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在0.5.x版本下就是正确的，在1.x版本下就是错误的</span></span><br></pre></td></tr></table></figure>
<p>在用<code>pip</code>命令安装时默认安装的是高版本，下面是卸载<code>Pyecharts</code>的命令和安装低版本的命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pyecharts <span class="comment"># 默认安装高版本</span></span><br><span class="line">pip uninstall pyecharts <span class="comment"># 卸载pycharts(无论任何版本)</span></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyecharts==<span class="number">0.5</span><span class="number">.5</span> <span class="comment"># 安装0.5.5</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python2和Python3的区别(更新中)</title>
    <url>/2021/01/10/Python2%E5%92%8CPython3%E7%9A%84%E5%8C%BA%E5%88%AB(%E6%9B%B4%E6%96%B0%E4%B8%AD)/</url>
    <content><![CDATA[<ol>
<li>在Python2中，/得到的是一个整数;在Python3中得到是一个浮点数</li>
<li>在python2中0o和0开始的数字都是8进制;在Python3中只有0o表示8进制</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm基本使用</title>
    <url>/2021/01/08/Pycharm%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Pycharm基本使用"><a href="#Pycharm基本使用" class="headerlink" title="Pycharm基本使用"></a>Pycharm基本使用</h2><ol>
<li>双击shift键(或Ctrl+shift+A)，会弹出全局搜索窗口</li>
<li>快速格式化代码 Ctrl+shift+L</li>
<li>快速复制粘贴选中代码 Ctrl+D</li>
<li>移动一行代码 Ctrl+shift+上下箭头</li>
<li>光标定位到一行开头Fn+左箭头，定位到一行结尾Fn+右箭头</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python分支语句和循环语句</title>
    <url>/2021/01/10/Python%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><ol>
<li><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">    条件成立时，执行的语句</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt; <span class="number">2</span> :</span><br><span class="line">    print(<span class="string">&quot;helloworld&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><h3 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">    条件成立时，执行的语句</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    当<span class="keyword">if</span>中的条件不成立时，执行的语句</span><br><span class="line">eg:</span><br><span class="line">msg=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> msg==<span class="number">0</span> :</span><br><span class="line">    print(<span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt; <span class="number">2</span> :</span><br><span class="line">    print(<span class="string">&quot;helloworld&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><h3 id="if…elif…else"><a href="#if…elif…else" class="headerlink" title="if…elif…else"></a>if…elif…else</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立，执行语句</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    条件<span class="number">2</span>成立，执行语句</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    当所有条件都不成立时，执行的语句</span><br><span class="line">eg:</span><br><span class="line">msg=<span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt;msg&lt;<span class="number">3</span> :</span><br><span class="line">    print(<span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">3</span>&lt;= msg &lt;=<span class="number">10</span> :  <span class="comment">#在Python中，允许这样进行左右判断</span></span><br><span class="line">    print(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(msg)</span><br></pre></td></tr></table></figure></li>
<li>pass关键字<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pass关键字在Python中没有意思，只是用来占位，保证代码的完整性</span></span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt; <span class="number">2</span> :</span><br><span class="line">    <span class="keyword">pass</span>   <span class="comment"># pass无意义，保证代码完整性</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="if语句注意点"><a href="#if语句注意点" class="headerlink" title="if语句注意点"></a>if语句注意点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>区间判断</span><br><span class="line">在Python中可以进行连写判断,如 <span class="number">0</span>&lt;=msg&lt;=<span class="number">10</span></span><br><span class="line"><span class="number">2.</span>隐式类型转换</span><br><span class="line"><span class="keyword">if</span>后面需要一个<span class="built_in">bool</span>类型的值，若不是<span class="built_in">bool</span>类型的值，则会自动转换</span><br><span class="line">eg：</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> :</span><br><span class="line">    print(<span class="string">&quot;你好&quot;</span>) <span class="comment"># 1会自动转换成bool类型的值true</span></span><br><span class="line"><span class="number">3.</span>三元表达式(对<span class="keyword">if</span>...<span class="keyword">else</span>的简写)</span><br><span class="line">x=num1 <span class="keyword">if</span> num1 &gt; num2 <span class="keyword">else</span> num2</span><br><span class="line">eg:</span><br><span class="line">x=<span class="number">1</span> <span class="keyword">if</span> <span class="number">1</span> &lt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">2</span> </span><br><span class="line">print(x)   <span class="comment"># 打印出的结果为1</span></span><br><span class="line"><span class="number">4.</span> 在Python中不支持switch...case...</span><br><span class="line"><span class="number">5.</span> 在Python中使用强制缩进来表示语句之间的结构</span><br></pre></td></tr></table></figure>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2></li>
<li><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件:</span><br><span class="line">    条件成立时,执行的语句</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">while</span> <span class="number">2</span>&lt;<span class="number">3</span>:</span><br><span class="line">    print(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> iterable:</span><br><span class="line">    执行语句</span><br><span class="line"><span class="comment">#这个和别的语言有所区别,对于计算数的时候一般用range</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">    print(i) <span class="comment"># 打印结果为0,1,2,3,4</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="for…in循环"><a href="#for…in循环" class="headerlink" title="for…in循环"></a>for…in循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for...in循环的本质是不断的调用next方法查找下一个数据</span></span><br><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> iterable:</span><br><span class="line">    执行语句</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    print(<span class="string">&quot;aaa&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><h3 id="for…else循环"><a href="#for…else循环" class="headerlink" title="for…else循环"></a>for…else循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> iterable:</span><br><span class="line">    执行语句</span><br><span class="line">    <span class="keyword">if</span> 条件判断:</span><br><span class="line">        <span class="keyword">break</span>   <span class="comment"># 若break被执行，则退出for...each循环，each不会被执行</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行语句 <span class="comment"># 当for语句执行完后且没有被break,则最后再执行each语句</span></span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    print(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:   <span class="comment"># 当for里面break被执行，each就不会被执行</span></span><br><span class="line">    print(<span class="string">&quot;111&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>:终止本层循环</span><br><span class="line"><span class="keyword">continue</span>:终止本次循环</span><br></pre></td></tr></table></figure></li>
<li><h3 id="循环语句注意事项"><a href="#循环语句注意事项" class="headerlink" title="循环语句注意事项"></a>循环语句注意事项</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Python中没有i++或i--,只能i+=<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 常用<span class="built_in">range</span>内置类生成一个整数区间进行循环</span><br><span class="line"><span class="number">3.</span> <span class="built_in">range</span>生成的整数区间以前一个数开始，以后一个数的前一个整数结束</span><br><span class="line"><span class="number">4.</span> <span class="keyword">in</span>后面是一个可迭代的对象,目前接触到的接迭代的对象:字符串,列表,字典,元组,集合,<span class="built_in">range</span></span><br><span class="line"><span class="number">5.</span> Python中没有do...<span class="keyword">while</span>...</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中函数的使用</title>
    <url>/2021/01/11/Python%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<ol>
<li>函数定义语法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># def 函数名(参数):</span></span><br><span class="line"><span class="comment">#    函数要执行的语句</span></span><br><span class="line">eg:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">person</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;&#123;&#125;说：他明天去旅游&#x27;</span>.<span class="built_in">format</span>(person))</span><br></pre></td></tr></table></figure></li>
<li>传参<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.一一对应传参</span></span><br><span class="line">say(<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"><span class="comment"># 2.通过变量名给形参赋值</span></span><br><span class="line">say(person=<span class="string">&#x27;xiaoming&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>返回值<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">return</span> a <span class="comment">#语法</span></span><br><span class="line"><span class="number">2.</span> 通常情况下只能<span class="keyword">return</span>一次</span><br><span class="line"><span class="number">3.</span> 如果一个函数没有返回值，那么它的返回值就是<span class="literal">None</span></span><br><span class="line"><span class="number">4.</span> 在特殊情况下(<span class="keyword">finally</span>语句)，一个函数可能会执行多个<span class="keyword">return</span>语句</span><br></pre></td></tr></table></figure></li>
<li>函数的注释<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在定义函数名的下一行按三对双引号，然后回车</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:param person:</span></span><br><span class="line"><span class="string">:return:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>全局变量和局部变量<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 定义在函数外的为全局变量</span><br><span class="line"><span class="number">2.</span> 定义在函数内的为局部变量</span><br><span class="line"><span class="number">3.</span> 如果局部变量和全局变量重名时，会在函数内部又定义一个新的局部变量，而不是修改变全局变量</span><br><span class="line"><span class="number">4.</span>如果在函数内部想要修改全局变量，则用<span class="keyword">global</span></span><br><span class="line">eg：想要在函数内部修改全局变量name</span><br><span class="line"><span class="keyword">global</span> name</span><br><span class="line">name=<span class="string">&#x27;xiaoming&#x27;</span></span><br><span class="line"><span class="number">5.</span>使用内置函数查看全局变量和局部变量</span><br><span class="line"><span class="built_in">globals</span>() <span class="comment"># 查看当前.py中的全局变量</span></span><br><span class="line"><span class="built_in">locals</span>()  <span class="comment"># 查看当前.py中的局部变量</span></span><br><span class="line"><span class="number">6.</span> 在Python中只有函数分作用域</span><br></pre></td></tr></table></figure></li>
<li>函数多个返回值<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 函数返回多个结果，就是将多个数据打包成一个整体返回，可以使用列表和字典</span><br><span class="line"><span class="number">2.</span> 通常情况下使用元组</span><br><span class="line"><span class="number">3.</span> 接受多个返回值时，若一直返回值个数，可直接用变量分别接受</span><br><span class="line">eg:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">x,y=test()</span><br><span class="line">print(<span class="string">&#x27;x=&#123;&#125;,y=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x,y))</span><br></pre></td></tr></table></figure></li>
<li>缺省参数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义：有些函数的参数是有默认参数，你传了用你的，不传用默认的</span><br><span class="line">eg:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">person=<span class="string">&#x27;xiaoming&#x27;</span></span>):</span></span><br><span class="line">    print(<span class="string">&#x27;&#123;&#125;说：他明天去旅游&#x27;</span>.<span class="built_in">format</span>(person))</span><br><span class="line"></span><br><span class="line">say() <span class="comment"># 当say函数不传参数时，就使用默认参数</span></span><br></pre></td></tr></table></figure></li>
<li>特殊传参<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 当位置参数和关键字参数混合使用时，位置参数在前</span><br><span class="line">eg:</span><br><span class="line">say(<span class="string">&#x27;xiaoming&#x27;</span>,age=<span class="number">18</span>)  <span class="comment"># 位置参数前，关键字参数后</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 位置可变参数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">name,*args</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">say(<span class="string">&#x27;xiaoming&#x27;</span>)  <span class="comment"># args为空</span></span><br><span class="line">say(<span class="string">&#x27;xiaoming&#x27;</span>,<span class="number">18</span>)  <span class="comment"># 18以元组的形式存在args里</span></span><br><span class="line"><span class="comment"># 多出来的可变参数会以元组的形式保存在args里</span></span><br><span class="line"><span class="comment"># 在定义函数参数时,先写位置参数再写可变位置参数，传参时也是</span></span><br><span class="line"><span class="comment"># 注意是一个*</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>可变关键字参数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">name,**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">say(name=<span class="string">&#x27;xiaoming&#x27;</span>)  <span class="comment"># kwargs为空</span></span><br><span class="line">say(<span class="string">&#x27;xiaoming&#x27;</span>,<span class="number">18</span>)  <span class="comment"># 18以元组的形式存在kwargs里</span></span><br><span class="line"><span class="comment"># 多出来的可变参数会以字典的形式保存在kwargs里</span></span><br><span class="line"><span class="comment"># 在定义函数参数时,先写位置参数再写可变位置参数，传参时也是</span></span><br><span class="line"><span class="comment"># 注意是**</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>当位置参数，可变位置参数，缺省参数，关键字参数，可变关键字参数同时出现时</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">位置参数，可变位置参数，缺省参数，关键字参数，可变关键字参数</span>)  </span></span><br><span class="line"><span class="function">#传参时也是一样</span></span><br></pre></td></tr></table></figure></li>
<li>注意事项 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 在Python中函数不允许重名,重名后一个会覆盖前一个</span><br><span class="line"><span class="number">2.</span> 函数名和变量名也不能重名</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中浅拷贝和深拷贝</title>
    <url>/2021/01/12/Python%E4%B8%AD%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>浅拷贝只拷贝一层,当列表中有嵌套时,嵌套的列表是指向而不是拷贝</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>]</span><br><span class="line">y=x.copy()</span><br><span class="line">print(<span class="string">&#x27;列表x的值为:&#x27;</span>,x)  <span class="comment">#列表x的值为: [1, 2, [3, 4], 5]</span></span><br><span class="line">print(<span class="string">&#x27;列表y的值为:&#x27;</span>,y)  <span class="comment">#列表y的值为: [1, 2, [3, 4], 5]</span></span><br><span class="line">x[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">100</span></span><br><span class="line">print(<span class="string">&#x27;列表x修改后,列表x的值为:&#x27;</span>,x)   <span class="comment">#列表x修改后,列表x的值为: [1, 2, [100, 4], 5]</span></span><br><span class="line">print(<span class="string">&#x27;列表x修改后,列表y的值为:&#x27;</span>,y)   <span class="comment">#列表x修改后,列表y的值为: [1, 2, [100, 4], 5]</span></span><br><span class="line"><span class="comment">#当修改列表x第一层时因为数据是拷贝过去的,所以对y无影响;</span></span><br><span class="line"><span class="comment">#当修改列表x第二层时因为数据是指向，当修改列表x时,y也跟着修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浅拷贝方法</span></span><br><span class="line"><span class="number">1.</span> 用copy函数</span><br><span class="line"><span class="number">2.</span> 引用copy模块,用copy模块里的copy函数</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210112145922.png"></p>
<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>深拷贝是对列表所有数据都拷贝,新列表和原列表没有一点关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>]</span><br><span class="line">y=copy.deepcopy(x)</span><br><span class="line">print(<span class="string">&#x27;列表x的值为:&#x27;</span>,x)  <span class="comment">#列表x的值为: [1, 2, [3, 4], 5]</span></span><br><span class="line">print(<span class="string">&#x27;列表y的值为:&#x27;</span>,y)  <span class="comment">#列表y的值为: [1, 2, [3, 4], 5]</span></span><br><span class="line">x[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">100</span></span><br><span class="line">print(<span class="string">&#x27;列表x修改后,列表x的值为:&#x27;</span>,x)   <span class="comment">#列表x修改后,列表x的值为: [1, 2, [100, 4], 5]</span></span><br><span class="line">print(<span class="string">&#x27;列表x修改后,列表y的值为:&#x27;</span>,y)   <span class="comment">#列表x修改后,列表y的值为: [1, 2, [3, 4], 5]</span></span><br><span class="line"><span class="comment"># 深拷贝只能用copy模块里的deepcopy函数进行拷贝</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python元组、列表、字典、集合</title>
    <url>/2021/01/11/Python%E5%85%83%E7%BB%84%E3%80%81%E5%88%97%E8%A1%A8%E3%80%81%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<ol>
<li><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 元组和列表很像，用来保存多个数据</span></span><br><span class="line"><span class="comment"># 使用一对小括号(),来表示一个元组</span></span><br><span class="line"><span class="comment"># 元组是不可变数据类型,因此只能进行查，不能进行增删改</span></span><br><span class="line"><span class="comment"># 元组是一个有序的存储数据的容器，可以通过下标来获取元素</span></span><br><span class="line"><span class="comment"># 元组也可以遍历</span></span><br><span class="line"></span><br><span class="line">index <span class="comment"># 通过下标获取元素</span></span><br><span class="line">count <span class="comment"># 用来统计指定元素的个数</span></span><br><span class="line">x=(<span class="number">1</span>,)  <span class="comment">#表示只有一个元素的元组</span></span><br><span class="line"><span class="built_in">tuple</span>   <span class="comment"># 实现可迭代对象转化为元组(列表list也可以这样用)</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 当我们保存多个数据时可以使用列表(列表近似于C语言的数组)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 使用[]表示一个列表，列表里的每一个数据表示元素，中间用逗号隔开</span><br><span class="line">[<span class="string">&#x27;xiaoming&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;河南&#x27;</span>] <span class="comment"># 即表示一个列表，数据类型可以不同</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 可以使用<span class="built_in">list</span>(可迭代对象),将可迭代对象转换成一个列表</span><br><span class="line">eg：</span><br><span class="line">x=<span class="built_in">list</span>((<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>))</span><br><span class="line">print(x) <span class="comment"># 打印结果：[&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 可以通过下标获取修改列表即对列表进行切片</span><br><span class="line">注：A[m:n] <span class="comment"># 例如在对a进行切片时,从下标m开始,不包含下标为n的</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 增加列表元素</span><br><span class="line">append <span class="comment"># 在列表末尾加一个元素</span></span><br><span class="line">insert <span class="comment"># 在指定位置插入元素</span></span><br><span class="line">extend <span class="comment"># 将可迭代对象添加到末尾</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 删除列表元素</span><br><span class="line">remove <span class="comment"># 删除列表指定元素</span></span><br><span class="line">clear <span class="comment"># 清空列表</span></span><br><span class="line"><span class="keyword">del</span> <span class="comment">#删除一个列表元素</span></span><br><span class="line">pop <span class="comment">#移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 查询列表元素</span><br><span class="line">index <span class="comment"># 返回指定元素下标,不存在会报错</span></span><br><span class="line">count <span class="comment"># 返回指定元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 修改元素</span><br><span class="line">用下标定位到元素,直接赋值</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> 调用列表的sort方法进行排序</span><br><span class="line">顺序排序:默认循序排序</span><br><span class="line">逆序排序:x.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> 内置函数<span class="built_in">sorted</span>排序</span><br><span class="line">新生成一个列表</span><br><span class="line"><span class="comment"># 注：sort排序是改变原列表的序列,sorted新生成一个列表</span></span><br><span class="line"></span><br><span class="line"><span class="number">11.</span> 列表逆序</span><br><span class="line">reverse:用函数</span><br><span class="line">x.[::-<span class="number">1</span>]:用切片法</span><br><span class="line"></span><br><span class="line"><span class="number">12.</span> 复制列表</span><br><span class="line">y=x <span class="comment"># x,y指向了同一个内存地址,会相互影响</span></span><br><span class="line">copy <span class="comment"># 新列表和原列表数据相同,内存地址不同,不会相互影响</span></span><br><span class="line"></span><br><span class="line"><span class="number">13.</span> 使用<span class="keyword">for</span>...<span class="keyword">in</span>对列表进行循环遍历时,尽量不要对列表进行删除操作</span><br><span class="line"></span><br><span class="line"><span class="number">14.</span> 列表的嵌套</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]] <span class="comment"># 列表可以嵌套使用</span></span><br><span class="line"></span><br><span class="line"><span class="number">15.</span> 带下标进行<span class="keyword">for</span>...<span class="keyword">in</span>循环(一般用<span class="keyword">while</span>)</span><br><span class="line"><span class="keyword">for</span> i,room <span class="keyword">in</span> <span class="built_in">enumerate</span>(rooms) <span class="comment"># enumerate是关键字</span></span><br><span class="line"></span><br><span class="line"><span class="number">16.</span> 列表推导式</span><br><span class="line"><span class="comment"># 用列表推导式创建一个列表,产生列表条件简单的时候使用</span></span><br><span class="line">nums=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] <span class="comment"># 产生0-9,这10个数据的列表</span></span><br><span class="line"></span><br><span class="line"><span class="number">17.</span> 列表合并</span><br><span class="line">extend <span class="comment"># 将两个列表合并成一个列表</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典里的数据都是以键值对的形式保存的</span></span><br><span class="line"><span class="comment"># key,value之间使用冒号连接，多个键值对之间使用逗号连接</span></span><br><span class="line"><span class="comment"># key是不允许重复的,重复了后一个会覆盖前一个</span></span><br><span class="line"><span class="comment"># key只能是不可变数据类型，而value可以是任意数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.查找数据(因为字典是无序的数据类型,所以只能用key来查找值)</span></span><br><span class="line">x[<span class="string">&#x27;key&#x27;</span>] <span class="comment"># 查找不到会报错</span></span><br><span class="line">x.get[<span class="string">&#x27;key&#x27;</span>] <span class="comment"># 查找不到会默认返回None</span></span><br><span class="line">x.get[<span class="string">&#x27;key&#x27;</span>,default] <span class="comment"># 查找不到返回default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.修改和删除(若存在key则修改,不存在则删除)</span></span><br><span class="line">x[<span class="string">&#x27;key&#x27;</span>]=value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.删除</span></span><br><span class="line">pop(<span class="string">&#x27;key&#x27;</span>) <span class="comment"># 删除并返回,否则返回默认值</span></span><br><span class="line">pop(<span class="string">&#x27;key&#x27;</span>,default) <span class="comment"># 删除并返回,否则返回default</span></span><br><span class="line">popitem() <span class="comment"># 返回并删除字典中的最后一对键和值</span></span><br><span class="line">clear() <span class="comment"># 清空字典</span></span><br><span class="line"><span class="keyword">del</span> x[<span class="string">&#x27;key&#x27;</span>] <span class="comment"># 直接删除,无返回值</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>合并</span><br><span class="line">A.update(B) <span class="comment"># A,B合并成一个字典,并赋值给A</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>循环</span><br><span class="line">方法一:直接<span class="keyword">for</span>...<span class="keyword">in</span>循环遍历字典</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> x: <span class="comment"># for...in循环遍历获取的是key</span></span><br><span class="line">    print(x,<span class="string">&#x27;=&#x27;</span>,x[k])</span><br><span class="line"></span><br><span class="line">方法二:获取所有的key,再由key获取value</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> x.keys(): </span><br><span class="line">    print(x,<span class="string">&#x27;=&#x27;</span>,x[k])</span><br><span class="line"><span class="comment"># 一般不用这种方法,和方法一几乎相同,多此一举</span></span><br><span class="line"></span><br><span class="line">方法三:获取所有的value</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> x.values():</span><br><span class="line">    print(v)</span><br><span class="line"></span><br><span class="line">方法四:拆包获取key,value</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> x.items():</span><br><span class="line">    print(k,<span class="string">&#x27;=&#x27;</span>,v)</span><br><span class="line"><span class="comment"># 常用方法一和四</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 交换key和value的位置</span><br><span class="line">方法一:</span><br><span class="line">x1=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;xiaoming&#x27;</span>&#125;</span><br><span class="line">x2=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> x1.items():</span><br><span class="line">    x2[v]=k</span><br><span class="line">方法二:字典推导式</span><br><span class="line">x=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;xiaoming&#x27;</span>&#125;</span><br><span class="line">x1=&#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> x.items() &#125;</span><br><span class="line">print(x1)</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>字典推导式</span><br><span class="line">x1=&#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> x.items() &#125;</span><br></pre></td></tr></table></figure></li>
<li><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集合是一个不重复的无序的数据类型</span></span><br><span class="line"><span class="comment"># 集合可以用&#123;&#125;或set表示</span></span><br><span class="line"><span class="comment"># &#123;&#125;有两种意思:字典、集合;当里面的数据不是键值对时表示字典</span></span><br><span class="line"><span class="comment"># 字典中不允许有重复元素,当有重复元素时会自动去重</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>增加元素</span><br><span class="line">add() <span class="comment"># 增加一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>清空集合</span><br><span class="line">clear() <span class="comment"># 清空集合</span></span><br><span class="line"><span class="built_in">set</span>() <span class="comment">#表示空集合</span></span><br><span class="line">&#123;&#125; <span class="comment"># 表示空列表</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 删除元素</span><br><span class="line">pop <span class="comment"># 随机删除一个</span></span><br><span class="line">remove <span class="comment"># 指定删除一个,若删除的元素不存在则会报错</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 合并</span><br><span class="line">union <span class="comment"># 两个集合合并在一起,生成一个新的集合</span></span><br><span class="line">A.update(B) <span class="comment"># 将B拼接在A里</span></span><br><span class="line"><span class="comment"># 被合并的那个是可迭代对象即可</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 集合支持很多运算符(但不支持加法)</span><br><span class="line">A-B <span class="comment"># A与B的差集,就是去掉A中,B中有的元素</span></span><br><span class="line">A&amp;b <span class="comment"># A与B的交集</span></span><br><span class="line">A|B <span class="comment">#A与B的并集</span></span><br><span class="line">A^B <span class="comment">#A和B差集的并集(即去掉AB中共有的元素,把其余的合并在一起)</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 特殊情况</span><br><span class="line"><span class="comment"># 当列表转化为集合,如果是数字会去重且自动按升序排序</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><h3 id="元组、列表、字典的区别"><a href="#元组、列表、字典的区别" class="headerlink" title="元组、列表、字典的区别"></a>元组、列表、字典的区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>元组(Tuple)</span><br><span class="line"><span class="comment"># (),有序，元素任意，元素不可变</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>列表(List)</span><br><span class="line"><span class="comment"># [],有序，元素任意，元素可变</span></span><br><span class="line"><span class="comment"># 与C语言的数组相似，不同的是C语言的数据类型要相同，list可以不同</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>字典(Dictionary)</span><br><span class="line"><span class="comment"># &#123;&#125;，无序，元素任意，元素可变</span></span><br><span class="line"><span class="comment"># 元素键值对存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表用extend合并,字典用update合并</span></span><br><span class="line"><span class="comment"># 元组和列表可以用加号使两个元组和列表合并成一个，字典不可以</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基本语法</title>
    <url>/2021/01/08/Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Python基本语法"><a href="#Python基本语法" class="headerlink" title="Python基本语法"></a>Python基本语法</h2><ol>
<li>注释<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"><span class="comment"># ptint(&quot;Hello Python&quot;)  //用# 或ctrl+/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多行注释</span></span><br><span class="line"><span class="comment"># print(&quot;你好&quot;)</span></span><br><span class="line"><span class="comment"># print(&quot;您好&quot;) //先选中，然后用Ctrl+/</span></span><br></pre></td></tr></table></figure></li>
<li>变量<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 变量直接赋值</span></span><br><span class="line">msg=<span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>input输入<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg=<span class="built_in">input</span>(<span class="string">&quot;请输入&quot;</span>)</span><br><span class="line"><span class="comment"># msg为变量名</span></span><br><span class="line"><span class="comment"># input括号里为输入提示信息</span></span><br></pre></td></tr></table></figure></li>
<li>del删除<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span>(msg)</span><br><span class="line"><span class="comment"># msg：删除的变量名</span></span><br></pre></td></tr></table></figure></li>
<li>标识符规则</li>
</ol>
<ul>
<li>由字母，数字，下划线组成</li>
<li>开头不能是数字</li>
<li>不能是Python关键字</li>
</ul>
<ol start="6">
<li>数据类型</li>
</ol>
<ul>
<li>str(字符串)</li>
<li>Number(数字)<ul>
<li>整数</li>
<li>浮点数</li>
<li>复数<code>msg=1+2j</code></li>
</ul>
</li>
<li>bool(布尔值)</li>
<li>None(空值)</li>
<li>list(列表)</li>
<li>tuple(元组)</li>
<li>dict(字典)</li>
<li>set(集合)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用type获取数据类型</span></span><br><span class="line">msg=<span class="number">123</span></span><br><span class="line">print(<span class="built_in">type</span>(a))</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="7">
<li>数据运算符的分类(与C语言一直的省略)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求幂 **</span></span><br><span class="line">print(<span class="number">2</span>**<span class="number">3</span>) <span class="comment"># 2的3次幂</span></span><br><span class="line"><span class="comment"># 取整 //</span></span><br><span class="line">print(<span class="number">12</span>//<span class="number">5</span>) <span class="comment"># 12对5取整</span></span><br></pre></td></tr></table></figure></li>
<li>符合运算符(写法与C一致)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=a+b</span><br><span class="line">等价于</span><br><span class="line">a+=b</span><br></pre></td></tr></table></figure></li>
<li>关系运算符(与C一致)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">== != &gt; &lt; &gt;= &lt;=</span><br></pre></td></tr></table></figure></li>
<li>常用位运算符(将数字转化为二进制进行运算)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&amp; <span class="comment"># 按位与</span></span><br><span class="line">| <span class="comment"># 按位或</span></span><br><span class="line">^ <span class="comment"># 按位异或</span></span><br><span class="line">~ <span class="comment"># 按位取反</span></span><br><span class="line">&lt;&lt; <span class="comment"># 左移位</span></span><br><span class="line">&gt;&gt; <span class="comment"># 右移位</span></span><br></pre></td></tr></table></figure></li>
<li>print<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a,b,c); </span><br><span class="line"><span class="comment"># 可以打印一个或多个变量或字符串</span></span><br><span class="line">print(value1,value2,value3,,sep=<span class="string">&#x27; &#x27;</span>,end=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># sep值用来设定输出时多个值之间的连接符，默认是空格</span></span><br><span class="line"><span class="comment"># end值用来设定输出结束时的结束符，默认是换行</span></span><br><span class="line"><span class="comment"># sep,end两者都是以键值对的形式出现</span></span><br></pre></td></tr></table></figure></li>
<li>input<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg=<span class="built_in">input</span>(<span class="string">&quot;提示信息&quot;</span>) </span><br><span class="line"><span class="comment"># input括号里保存的是提示信息</span></span><br><span class="line"><span class="comment"># 输入的信息会保存在变量msg</span></span><br><span class="line"><span class="comment"># 无论输入的是什么，msg的数据类型都为str</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中进制和数据类型转换</title>
    <url>/2021/01/09/Python%E4%B8%AD%E8%BF%9B%E5%88%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<ol>
<li><h3 id="二、八、十六进制转换"><a href="#二、八、十六进制转换" class="headerlink" title="二、八、十六进制转换"></a>二、八、十六进制转换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  二进制:前缀,0b;<span class="number">0b11</span>;每个位最大不能超过<span class="number">1</span></span><br><span class="line">  八进制:前缀,0o;<span class="number">0o17</span>;每个位最大不能超过<span class="number">7</span></span><br><span class="line">十六进制:前缀,0x;<span class="number">0x1f</span>;每个位最大不能超过f</span><br><span class="line"><span class="comment"># 注：在python2中0o和0开始的数字都是8进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手算转换</span></span><br><span class="line"><span class="number">2</span>进制转换为<span class="number">8</span>：从后向前<span class="number">3</span>位一组进行</span><br><span class="line"><span class="number">2</span>进制转换为<span class="number">16</span>：从后向前<span class="number">4</span>位一组进行</span><br><span class="line"><span class="number">2</span>,<span class="number">8</span>,<span class="number">16</span>进制转换成十进制，都是按照幂次，然后相加进行计算</span><br><span class="line"><span class="number">10</span>进制转换成<span class="number">2</span>进制：除留余数法</span><br><span class="line"></span><br><span class="line"><span class="comment"># 机算</span></span><br><span class="line">a=<span class="number">12</span> <span class="comment">#10进制数</span></span><br><span class="line"><span class="built_in">bin</span>(a) <span class="comment"># 将10进制数转换成2进制</span></span><br><span class="line"><span class="built_in">oct</span>(a) <span class="comment"># 将10进制数转换成8进制</span></span><br><span class="line"><span class="built_in">hex</span>(a) <span class="comment"># 将10进制数转换成16进制</span></span><br><span class="line">注：当a不等于数字时会报错</span><br></pre></td></tr></table></figure></li>
<li>数据类型之间的转换<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#转换函数</span></span><br><span class="line">msg=<span class="built_in">int</span>(msg) </span><br><span class="line"><span class="comment"># 将不是int型的变量转换成int型的变量</span></span><br><span class="line"><span class="comment"># 其余类型写法相同，如float</span></span><br><span class="line"><span class="comment"># 当被转换的msg不是纯数字会转换失败，报错 </span></span><br><span class="line">msg=<span class="built_in">int</span>(x,y)</span><br><span class="line"><span class="comment"># 将字符串x,按照y进制转换成10进制数</span></span><br><span class="line">eg:</span><br><span class="line">msg=<span class="built_in">int</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="number">16</span>) <span class="comment"># 将字符串&#x27;abc&#x27;按照16进制数转换成10进制数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换原因</span></span><br><span class="line">不同的数据类型有时候不能进行运算</span><br><span class="line"></span><br><span class="line"><span class="comment"># True False</span></span><br><span class="line">在进行数据运算时,<span class="literal">True</span>=<span class="number">1</span>,<span class="literal">False</span>=<span class="number">0</span>;</span><br><span class="line">eg:</span><br><span class="line">print(<span class="literal">True</span> + <span class="number">1</span>)  <span class="comment"># 结果为2</span></span><br></pre></td></tr></table></figure></li>
<li>转换成布尔值<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在数字里，只有0会被转换成False</span></span><br><span class="line"><span class="comment"># 在字符串里只有空字符串会被转换成False,空格串也会被转换成True</span></span><br><span class="line"><span class="comment"># None会被转换为False,eg:bool(None),打印出来是False</span></span><br><span class="line"><span class="comment"># 空数据类型会被转换成False,如[],(),&#123;&#125;等</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python经典问题</title>
    <url>/2021/01/12/Python%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li><h3 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">2</span></span><br><span class="line"><span class="comment"># 方法一:利用第三个变量实现</span></span><br><span class="line">c=b</span><br><span class="line">b=a</span><br><span class="line">a=c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二:利用运算符实现</span></span><br><span class="line">a=a+b</span><br><span class="line">b=a-b</span><br><span class="line">a=a-b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三:利用异或运算符实现</span></span><br><span class="line">a=a^b</span><br><span class="line">b=a^b</span><br><span class="line">a=a^b</span><br><span class="line"><span class="comment"># 原理 a^b^b==a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法四:使用Python特有的方法实现</span></span><br><span class="line">a,b=b,a</span><br></pre></td></tr></table></figure></li>
<li>for…in循环删除元素</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python字符串</title>
    <url>/2021/01/12/Python%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol>
<li><h3 id="单引号和双引号"><a href="#单引号和双引号" class="headerlink" title="单引号和双引号"></a>单引号和双引号</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在Python中可以使用一对单引号或双引号；也可以使用三对单引号或双引号</span><br><span class="line">eg:</span><br><span class="line"><span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;hello&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;hello&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">当字符串里面还有引号时，用单双引号嵌套使用，使表达的意思清晰</span><br><span class="line">eg:</span><br><span class="line">msg=<span class="string">&#x27;xiaoming say&quot;I am xiaoming&quot;&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="字符串的转义字符"><a href="#字符串的转义字符" class="headerlink" title="字符串的转义字符\"></a>字符串的转义字符\</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># \&#x27; ==&gt; 显示一个普通的单引号</span></span><br><span class="line"><span class="comment"># \&quot; ==&gt; 显示一个普通的双引号</span></span><br><span class="line"><span class="comment"># \n ==&gt; 表示一个换行</span></span><br><span class="line"><span class="comment"># \t ==&gt; 表示一个制表符</span></span><br><span class="line"><span class="comment"># \\ ==&gt; 表示一个普通的\</span></span><br><span class="line"><span class="comment"># r&#x27;字符串&#x27; ==&gt; 表示原生字符串，\n等会原生输出，不会表现特殊含义(r,R都可以)</span></span><br><span class="line">eg:</span><br><span class="line">x1=<span class="string">&#x27;I\&#x27;m xiaoming&#x27;</span>     <span class="comment"># 若不用转移字符对&#x27;进行转义，则在m之前最会被截断，从而报错，不是一个字符串</span></span><br><span class="line">x2=<span class="string">&#x27;你好\n世界&#x27;</span>     </span><br><span class="line"><span class="comment"># 打印是：</span></span><br><span class="line">你好</span><br><span class="line">世界</span><br><span class="line"><span class="comment">#中间会转行 </span></span><br><span class="line"><span class="comment">#若x3=&#x27;你好\\n世界&#x27;</span></span><br><span class="line"><span class="comment">#打印结果是 你好\n世界     #因为已经对\进行转义，转义后仅表示一个普通的\字符 </span></span><br><span class="line">m=<span class="string">&#x27;hello\tworld&#x27;</span></span><br><span class="line">n=<span class="string">r&#x27;hello\tworld&#x27;</span></span><br><span class="line">print(m) <span class="comment"># 打印 hello	world</span></span><br><span class="line">print(n) <span class="comment"># 打印 hello\tworld，因为r会使字符串保持原生</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="字符串下标"><a href="#字符串下标" class="headerlink" title="字符串下标"></a>字符串下标</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下标又被称为索引，表示第几个数据</span></span><br><span class="line"><span class="comment"># str,list,tuple类型的数据可以通过下标获取或操作数据</span></span><br><span class="line"><span class="comment"># 切记，字符串是不可变数据类型(原数据永远不会修改，是在原数据的基础上新产生的数据)</span></span><br><span class="line"><span class="comment"># 下标是用0开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过下标来获取或则修改指定位置的数据</span></span><br><span class="line">word=<span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">print(word[<span class="number">4</span>]) <span class="comment"># 打印n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串是不可变数据类型</span></span><br><span class="line"><span class="comment"># 对于字符串的任何操作，都不会改变原有的字符串！！！</span></span><br><span class="line">word=<span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"><span class="comment"># 不管对word做任何操作</span></span><br><span class="line">print(word)   <span class="comment"># word打印的结果恒为 zhangsan</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切片就是从字符串里复制一段指定的内容，生成一个新的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片语法</span></span><br><span class="line">m[star:end:step]    <span class="comment"># m是字符串的变量名</span></span><br><span class="line"><span class="comment"># 复制的内容中包含stat位，不包含end位</span></span><br><span class="line"><span class="comment"># step表示步长，每步取一个数据，step默认为1</span></span><br><span class="line">m[Index] <span class="comment"># 获取字符串指定下标的数据</span></span><br><span class="line">m[star:end] <span class="comment"># 获取从star到end的数据</span></span><br><span class="line">m[star:] <span class="comment"># 获取从star开始的所有数据</span></span><br><span class="line">m[:end] <span class="comment"># 获取从头开始到end的数据</span></span><br><span class="line">m[::] <span class="comment"># 从复制整个字符串</span></span><br><span class="line">m[::step] <span class="comment">#整个字符串每step复制一个数据</span></span><br><span class="line">m[star:end:step] <span class="comment">#获取从star到end,没step取一个数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意</span></span><br><span class="line"><span class="comment"># 1.步长不能为0，但可以为负</span></span><br><span class="line"><span class="comment"># 2.当步长为负时，从star位开始向前运算</span></span><br><span class="line"><span class="comment"># 3.当step&lt;0且star&lt;end时，截取的内容为空(因为从star开始向前找不到end)</span></span><br><span class="line"><span class="comment"># 4.当star和end都为负数，表示从右向左数</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="字符串常见操作"><a href="#字符串常见操作" class="headerlink" title="字符串常见操作"></a>字符串常见操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(x) <span class="comment"># 获取字符串长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找相关方法</span></span><br><span class="line">x.find(a) <span class="comment"># 查找字符串x中,字符c串a的下标，失败返回-1(返回a第一次出现的)</span></span><br><span class="line">x.index(a)  <span class="comment"># 查找字符串x中,字符串a的下标，失败会报错(返回a第一次出现的)</span></span><br><span class="line">x.rfind(a)  <span class="comment"># 查找字符串x中,字符串a的下标，失败返回-1(返回a最后一次出现的)</span></span><br><span class="line">x.rindex(a)  <span class="comment"># 查找字符串x中,字符串a的下标，失败会报错(返回a最后一次出现的)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断相关方法</span></span><br><span class="line"><span class="comment"># is开头的都是判断结果是bool值</span></span><br><span class="line">x.startswith(a) <span class="comment"># 判断是否以字符串a开头</span></span><br><span class="line">x.endswith(a) <span class="comment"># 判断是否以字符串a结尾</span></span><br><span class="line">x.isdigit() <span class="comment"># 判断是否是纯数字</span></span><br><span class="line">x.isalpha() <span class="comment"># 判断是否是纯字母</span></span><br><span class="line">x.isalnum() <span class="comment"># 判断是否由纯字母数字组成(纯数字,纯字母,字母数字混合都为True,但当有其他字符如空格时就是False)</span></span><br><span class="line">x.isspace() <span class="comment"># 检测字符串是否只由空格组成,只有空格返回True,否则返回False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">x.replace(a,b) <span class="comment"># 用b替换字符串x中的a    </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割</span></span><br><span class="line"><span class="comment">#按照指定字符串分割 </span></span><br><span class="line">x.split(a) <span class="comment"># 用字符串a将字符串x分割成一个列表</span></span><br><span class="line">x.rsplit(a,b) <span class="comment"># 用字符串a将字符串x从左切b次分割成一个列表</span></span><br><span class="line">x.split(a) <span class="comment"># 用字符串a将字符串x分割成一个列表</span></span><br><span class="line">x.rsplit(a,b) <span class="comment"># 用字符串a将字符串x从右切b次分割成一个列表</span></span><br><span class="line"><span class="comment">#按照行分割</span></span><br><span class="line">x.splitlines() <span class="comment"># 在有换行出\n处分割</span></span><br><span class="line"><span class="comment">#按照指定字符串分成三部分</span></span><br><span class="line">x.partition(a) <span class="comment"># 在第一个a处将字符串x分成三部分:a左侧,a,a右侧</span></span><br><span class="line">x.rpartition(a) <span class="comment"># 在最后一个a处将字符串x分成三部分:a左侧,a,a右侧</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="修改大小写"><a href="#修改大小写" class="headerlink" title="修改大小写"></a>修改大小写</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.capitalize() <span class="comment"># 让字符串x第一个字符大写</span></span><br><span class="line">x.upper() <span class="comment"># 让字符串x中所有字符都大写</span></span><br><span class="line">x.lower() <span class="comment"># 让字符串x中所有字符都小写</span></span><br><span class="line">x.title() <span class="comment"># 让字符串x中所有单词首字母大写</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="字符串填充"><a href="#字符串填充" class="headerlink" title="字符串填充"></a>字符串填充</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.ljust(width) <span class="comment"># 在字符串x的左边填空格，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class="line">x.rjust(width) <span class="comment"># 在字符串x的右边填空格，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class="line">x.center(width) <span class="comment"># 在字符串两侧平均填空格，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class="line">x.ljust(width,fillchar) <span class="comment"># 在字符串x的左边填filechar，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class="line">x.rjust(width,fillchar) <span class="comment"># 在字符串x的右边填filechar，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br><span class="line">x.center(width,fillchar) <span class="comment"># 在字符串两侧平均填fillchar，使字符串长度变为width(len(x)大于width，不做任何操作)</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="增删空格"><a href="#增删空格" class="headerlink" title="增删空格"></a>增删空格</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.lstrip() <span class="comment">#去除x中左侧的空格</span></span><br><span class="line">x.rstrip() <span class="comment">#去除x中右侧的空格</span></span><br><span class="line">x.lstrip(chars) <span class="comment">#去除x中左侧的chars</span></span><br><span class="line">x.rstrip(chars) <span class="comment">#去除x中右侧的chars</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="列表、字符串之间的转化"><a href="#列表、字符串之间的转化" class="headerlink" title="列表、字符串之间的转化"></a>列表、字符串之间的转化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.split(<span class="built_in">str</span>) <span class="comment"># 用字符str把x分成一个list</span></span><br><span class="line"><span class="built_in">str</span>.join(chars) <span class="comment"># 用字符str把chars连接成一个字符串</span></span><br><span class="line"><span class="comment"># chars是一个可迭代的对象</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="字符串的运算符"><a href="#字符串的运算符" class="headerlink" title="字符串的运算符"></a>字符串的运算符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.字符串和字符串之间可以相加</span></span><br><span class="line"><span class="comment"># 2.字符串和数字之间可以相乘</span></span><br><span class="line"><span class="comment"># 3.字符串和数字之前：==为False；!=为True</span></span><br><span class="line"><span class="comment"># 4.字符串和字符串之间做比较运算，会逐个比较字符串的编码值</span></span><br><span class="line"><span class="comment"># 5.不支持其他运算符</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="利用内置函数实现数字、字符间的转化-ASCII码"><a href="#利用内置函数实现数字、字符间的转化-ASCII码" class="headerlink" title="利用内置函数实现数字、字符间的转化(ASCII码)"></a>利用内置函数实现数字、字符间的转化(ASCII码)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>(char) <span class="comment"># 查看字符char的ASCII码</span></span><br><span class="line"><span class="built_in">chr</span>(num) <span class="comment"># 查看ASCII码num所对应的字符</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="in-和-not-in"><a href="#in-和-not-in" class="headerlink" title="in 和 not in"></a>in 和 not in</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">in</span> <span class="comment"># 用来判断一个内容是否在可迭代对象中</span></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">in</span> <span class="comment"># 用来判断一个内容是否不在可迭代对象中</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="使用-占位符来格式化字符串"><a href="#使用-占位符来格式化字符串" class="headerlink" title="使用% 占位符来格式化字符串"></a>使用% 占位符来格式化字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># %s    表示的是字符串的占位符</span></span><br><span class="line"><span class="comment"># %d    表示的整数的占位符</span></span><br><span class="line"><span class="comment"># %nd   打印时显示n位，如果不够，n&gt;0在前面用空格补齐,n&lt;0在后面补空格</span></span><br><span class="line"><span class="comment"># %0d   打印时显示n位，如果不够，在前面用0补齐</span></span><br><span class="line"><span class="comment"># %f    表示浮点数的占位符</span></span><br><span class="line"><span class="comment"># %nf   表示浮点数的占位符,四舍五入保留n为小数</span></span><br><span class="line"><span class="comment"># %%    打印一个%</span></span><br><span class="line"><span class="comment"># %x    将数字按16进制输出，字符为小写</span></span><br><span class="line"><span class="comment"># %X    将数字按16进制输出，字符为大写</span></span><br><span class="line"><span class="comment"># print(&#x27;%3d&#x27;% 15) ##语法</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="format方法"><a href="#format方法" class="headerlink" title="format方法"></a>format方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#123;&#125; 可以用来占位，用format中的数据进行填充</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一一对应填充</span></span><br><span class="line"><span class="comment"># x=&#x27;大家好,我是&#123;&#125;,今年&#123;&#125;岁&#x27;.format(&#x27;xiaoming&#x27;,18)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;数字&#125;，数字从0开始</span></span><br><span class="line"><span class="comment"># x=&#x27;大家好,我是&#123;1&#125;,今年&#123;0&#125;岁&#x27;.format(18,&#x27;xiaoming&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;变量名&#125;,相当于键值对</span></span><br><span class="line"><span class="comment"># x=&#x27;大家好,我是&#123;name&#125;,今年&#123;age&#125;岁&#x27;.format(name=&#x27;xiaoming&#x27;,age=18)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;数字&#125;&#123;变量名&#125;混合使用</span></span><br><span class="line"><span class="comment"># x=&#x27;大家好,我是&#123;name&#125;,今年&#123;1&#125;岁,身高&#123;0&#125;cm&#x27;.format(180,18,name=&#x27;xiaoming&#x27;)</span></span><br><span class="line"><span class="comment"># 要先写数字的值，再写变量名的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用list填充</span></span><br><span class="line"><span class="comment"># data=[&#x27;xiaoming&#x27;,18,180]</span></span><br><span class="line"><span class="comment"># x=&#x27;大家好,我是&#123;&#125;,今年&#123;&#125;岁,身高&#123;&#125;cm&#x27;.format(*data)</span></span><br><span class="line"><span class="comment"># 切记加*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用dictionary填充</span></span><br><span class="line"><span class="comment"># data=&#123;&#x27;name&#x27;:&#x27;xiaoming&#x27;,&#x27;age&#x27;:18,&#x27;high&#x27;:180&#125;</span></span><br><span class="line"><span class="comment"># x=&#x27;大家好,我是&#123;name&#125;,今年&#123;age&#125;岁,身高&#123;high&#125;cm&#x27;.format(**data)</span></span><br><span class="line"><span class="comment"># 切记加**</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo备份与恢复</title>
    <url>/2021/01/04/hexo%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><ol>
<li>在github的博客仓库创建新的分支<strong>backup</strong></li>
<li>打开git Bash Here，输入 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure></li>
<li>添加提交设置：打开blog/_config.yml在最后添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">backup:</span><br><span class="line">type: git</span><br><span class="line">repository:</span><br><span class="line">github: git@github.com:Romanticqq&#x2F;romanticqq.github.io.git,backup(提交的github地址,分支名)</span><br></pre></td></tr></table></figure></li>
<li>当要对代码备份时，执行<code>hexo d</code>即备份成功</li>
</ol>
<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><ol>
<li>把github的博客仓库<strong>backup</strong>分支的内容下载到本地</li>
<li>依次执行下列命令 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure></li>
<li>本地文件恢复，<code>hexo s</code>开启本地服务，在浏览器输入<code>http://localhost:4000</code>测试是否正常</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+PicGo+gitee图床</title>
    <url>/2021/01/05/hexo-PicGo-gitee%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p><strong>前言</strong>：我尝试了好几种床图，不是在电脑端加载不出来，就是有各种各样的限制，最后找到了gitee，因为服务器在国内，访问速度也是比较快，空间也没有限制，算是比较理想的一种吧。一开始我用vscode+PicGo插件，等到快成的时候，图片是上传上去了，但是加载不出来，我尝试了<code>sm.ms</code>和<code>github</code>，最后抛弃了<code>vsCode+PicGo</code>插件，选择了<code>PicGo客户端和gitee</code>。</p>
<ol>
<li><strong>注册gitee账号</strong><br>去官网注册账号<a href="https://gitee.com/">gitee</a></li>
<li><strong>新建gitee仓库</strong><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203048.png"><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203450.png"></li>
<li><strong>获得gitee的token</strong><br>登录<code>gitee</code>官网，点击头像/设置/私人令牌/生成令牌<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203902.png"><br>点击提交后复制生成的令牌，在配置的时候要使用</li>
<li><strong>下载gitee</strong><br>点击<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>下载，有不同的版本，都可以<br>下载成功后按照提示默认安装即可</li>
<li><strong>配置gitee</strong><br>默认状态下PicGo是没有<code>gitee</code>，因此先安装插件<code>gitee-uploader</code><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105205151.png"><br>这时，点击图床设置，已经有<code>gitee图床</code>的设置<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105205522.png"> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1:打开新建的仓库，看地址栏，若地址栏为https:&#x2F;&#x2F;gitee.com&#x2F;A&#x2F;B,则需要填A&#x2F;B</span><br><span class="line">2:默认为master就可以</span><br><span class="line">3:把刚才生成的token粘贴到这里</span><br><span class="line">4:path为创建的仓库存放图片的文件夹名，可以为image，可任意填写</span><br><span class="line">5:其余开心就好</span><br></pre></td></tr></table></figure></li>
<li><strong>升华</strong><br>为更方便地获取截图外链，安装<code>picgo-plugin-quick-capture</code>,实现截图上传一步搞定</li>
<li><strong>Typora+PicGo+gitee配置</strong><br>如果用<code>Typora</code>写<code>Markdown</code>文章，还需要对<code>Typora</code>进行配置，找到<code>文件/偏好设置/图像</code><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105212825.png"><br>在typora中，当插入本地图片时，会自动转换成gitee外链</li>
</ol>
<p><strong>tips</strong></p>
<ol>
<li>通过上面的操作已经实现了快速上传和快速截图上传功能，当我们要用本地图片生成外链时，先复制一下本地图片(就是选中图片按下Ctrl+c),然后按下快速上传的快捷键，此时外链已经生成，在需要插入图片的位置Ctrl+V就可以了</li>
<li>当使用快速截图上传时，如果是直接截图的话，截完图后直接Ctrl+V就可以了，但如果是截完图后需要写批注，那么截的图并不一定可以自动上传，需要按下快速上传的快捷键，然后再Ctrl+V</li>
<li>通过PicGo可以查看和删除上传的图片<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105212411.png"></li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>PicGo</tag>
        <tag>gitee</tag>
        <tag>Typora</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>happyBirthday</title>
    <url>/2021/05/01/happyBirthday/</url>
    <content><![CDATA[<p><a href="http://47.94.243.37/birthday-2019/index.html">2019</a></p>
<p><a href="http://47.94.243.37/birthday-2020/index.html">2020</a></p>
<p><a href="http://47.94.243.37/birthday-2021/index.html">2021</a></p>
<p><strong>欢迎打赏哈！</strong></p>
]]></content>
      <tags>
        <tag>happyBirthday</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo插入图片</title>
    <url>/2021/01/05/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><ol>
<li>在blog的本地文件的根目录中打开git Bash，然后执行<br><code>    npm install hexo-asset-image --save</code></li>
<li>打开blog根目录下的配置文件_config.yml，修改<br><code>post_asset_folder: true  //由false改为true</code><br>此时，当执行<code>hexo n 文章名</code>的时候，会在_post目录下新建同名的一个文件夹和一个后缀名为<code>.md</code>的文件<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105173654.png"><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105173920.png"></li>
<li>打开<code>/node_modules/hexo-asset-image/index.js</code> 用下面代码替换<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">var cheerio &#x3D; require(&#39;cheerio&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14480345&#x2F;how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version &#x3D; String(hexo.version).split(&#39;.&#39;);</span><br><span class="line">hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;</span><br><span class="line">  var config &#x3D; hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">        var link &#x3D; data.permalink;</span><br><span class="line">    if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)</span><br><span class="line">       var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1;</span><br><span class="line">    else</span><br><span class="line">       var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;</span><br><span class="line">    &#x2F;&#x2F; In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;...&#x2F;about&#x2F;index.html&quot;.</span><br><span class="line">    var endPos &#x3D; link.lastIndexOf(&#39;&#x2F;&#39;) + 1;</span><br><span class="line">    link &#x3D; link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess &#x3D; [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];</span><br><span class="line">    for(var i &#x3D; 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key &#x3D; toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ &#x3D; cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#39;img&#39;).each(function()&#123;</span><br><span class="line">        if ($(this).attr(&#39;src&#39;))&#123;</span><br><span class="line">            &#x2F;&#x2F; For windows style path, we replace &#39;\&#39; to &#39;&#x2F;&#39;.</span><br><span class="line">            var src &#x3D; $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;&#x2F;&#39;);</span><br><span class="line">            if(!&#x2F;http[s]*.*|\&#x2F;\&#x2F;.*&#x2F;.test(src) &amp;&amp;</span><br><span class="line">               !&#x2F;^\s*\&#x2F;&#x2F;.test(src)) &#123;</span><br><span class="line">              &#x2F;&#x2F; For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.</span><br><span class="line">              &#x2F;&#x2F; In addition, to support multi-level local directory.</span><br><span class="line">              var linkArray &#x3D; link.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">                return elem !&#x3D; &#39;&#39;;</span><br><span class="line">              &#125;);</span><br><span class="line">              var srcArray &#x3D; src.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">                return elem !&#x3D; &#39;&#39; &amp;&amp; elem !&#x3D; &#39;.&#39;;</span><br><span class="line">              &#125;);</span><br><span class="line">              if(srcArray.length &gt; 1)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src &#x3D; srcArray.join(&#39;&#x2F;&#39;);</span><br><span class="line">              $(this).attr(&#39;src&#39;, config.root + link + src);</span><br><span class="line">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">            console.info&amp;&amp;console.info($(this));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] &#x3D; $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>把自己想用的图片放在新建的文件夹(文章名的文件夹)中，在<code>test.md</code>中引用是<code>![](图片的文件名)</code><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105183827.png"></li>
</ol>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><ol>
<li>在<code>\blog\source</code>目录下新建<code>image</code>文件夹<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105184557.png"></li>
<li>把想要插入的图片都放入<code>image</code>文件夹下</li>
<li>在插入图片的位置引用<code>![](/image/图片名)</code>即可</li>
</ol>
<p><strong>注</strong>：按照这种方式插入可能会在本地图片加载不出来，上传后就可以加载出来了；若上传后还加载不出来，检查blog根目录下的配置文件<code>_config.yml</code>的<code>post_asset_folder:</code>是否为<code>false</code></p>
<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>用图床实现插入图片，也是最推荐的一种，具体见<a href="https://romanticqq.top/2021/01/05/hexo-PicGo-gitee%E5%9B%BE%E5%BA%8A/">hexo+PicGo+gitee图床</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo绑定域名</title>
    <url>/2021/01/05/hexo%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<ol>
<li><strong>注册域名</strong><br>可以挑选<a href="https://cloud.tencent.com/">腾讯云</a>或<a href="https://www.aliyun.com/">阿里云</a>，或则其余任何一家进行域名注册</li>
<li><strong>获取github仓库IP</strong><br>打开<code>cmd</code>,<code>ping 仓库名.github.io</code>,获取IP<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105215709.png"><br>我的这个ping的有点问题，但方法没错</li>
<li><strong>域名和IP绑定</strong><br>找到控制台，点解析<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105220220.png"><br>然后点击修改，按照下面图片提示<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105220540.png"></li>
<li><strong>创建CNAME文件</strong><br>在<code>blog/source</code>目录创建<code>CNAME(无后缀名)</code>,把申请的域名填入即可<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105215242.png"></li>
<li><strong>域名和github仓库绑定</strong><br>打开存放博客的仓库，点击<code>settings</code>,找到<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105214939.png"><br>在输入框输入申请的域名，然后点击<code>save</code></li>
<li><strong>访问</strong><br>域名，IP，https://仓库名.github.io，三则都可访问</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署</title>
    <url>/2021/01/04/hexo%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ol>
<li>注册github账号(有github账号的可跳过)</li>
<li>登录后，新建一个代码仓库名为：github账号名.github.io,权限为public</li>
<li>实现git和github的链接<ol>
<li>鼠标右键打开git Bash Here</li>
<li>在git Bash Here中设置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure></li>
<li> 然后再输入，获取密钥<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot; </span><br></pre></td></tr></table></figure>
按照提示默认下一步，生成两个文件，按照所给出的路径，用记事本打开id_rsa.pub，并复制</li>
<li>打开github的settings/SSH and GPG keys<br>点击SSH keys旁边的新建，在Title处给密钥起一个名字，并把密钥粘贴到Key处，</li>
<li>输入<code> ssh -T git@github.com</code>判断git和github是否连接成功</li>
</ol>
</li>
<li>添加提交设置：打开blog/_config.yml在最后添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git   </span><br><span class="line">repo: https:&#x2F;&#x2F;github.com&#x2F;Romanticqq&#x2F;romanticqq.github.io.git &#x2F;&#x2F;提交的github仓库地址</span><br><span class="line">branch: master &#x2F;&#x2F;分支名</span><br></pre></td></tr></table></figure></li>
<li>进行部署 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &#x2F;&#x2F;清理public的内容</span><br><span class="line">hexo g &#x2F;&#x2F;生成静态内容</span><br><span class="line">hexo d  &#x2F;&#x2F;部署上传</span><br><span class="line">可能在上传时会报错，此时需要执行下面一句命令行</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>访问<br>在浏览器地址栏输入<code>https://仓库名.github.io</code>,即可访问</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Python运算符</title>
    <url>/2021/01/12/Python%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ol>
<li><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">+:加</span><br><span class="line">-:减</span><br><span class="line">*:乘</span><br><span class="line">/:除(结果可以是<span class="built_in">float</span>)</span><br><span class="line">%:取余</span><br><span class="line">**:幂运算 eg: print(<span class="number">2</span>**<span class="number">3</span>) <span class="comment">#打印2的3次幂</span></span><br><span class="line">//:整除(向下取整)</span><br><span class="line">注：</span><br><span class="line"><span class="comment"># 可用幂运算进行开方运算</span></span><br><span class="line">eg:print(<span class="number">81</span>**(<span class="number">1</span>/<span class="number">2</span>)) <span class="comment">#打印的是81开平方的结果，即为9</span></span><br><span class="line"><span class="comment"># 在Python2中，/得到的是一个整数;在Python3中得到是一个浮点数</span></span><br><span class="line"><span class="comment"># 在开发中使用括号来表示优先级,比较清晰</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="算术运算符在字符串中的使用"><a href="#算术运算符在字符串中的使用" class="headerlink" title="算术运算符在字符串中的使用"></a>算术运算符在字符串中的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在字符串中有限度的支持加法和乘法运算符</span></span><br><span class="line">print(<span class="string">&quot;hello&quot;</span>+<span class="string">&quot;world&quot;</span>)   <span class="comment"># 结果为 helloworld(用于拼接字符串)</span></span><br><span class="line">print(<span class="string">&quot;hello&quot;</span>*<span class="number">2</span>)         <span class="comment"># 结果为 hellohello</span></span><br><span class="line">注：字符串和数字是不能相加的</span><br><span class="line">print(<span class="string">&quot;a&quot;</span>+<span class="number">1</span>) <span class="comment"># 会报错</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1</span> <span class="comment"># 单个变量赋值</span></span><br><span class="line">m,n=<span class="number">1</span>,<span class="number">2</span> <span class="comment"># 多个变量赋值(拆包),且当等号左右两侧个数不相等时会报错</span></span><br><span class="line">o*,p,q=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> <span class="comment">#加*表示可变长度,把4,5分别赋给p,q,其余全部赋值给o</span></span><br><span class="line">m=<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span> <span class="comment"># 元组赋值</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比较运算符</span></span><br><span class="line">&gt;:大于</span><br><span class="line">&lt;:小于</span><br><span class="line">&gt;=:大于等于</span><br><span class="line">&lt;=:小于等于</span><br><span class="line">!=:不等于(在python2&lt;&gt;也表示不等于，python3不支持)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较运算符在字符串中的使用</span></span><br><span class="line">print(<span class="string">&#x27;a&#x27;</span>&lt;<span class="string">&#x27;b&#x27;</span>) <span class="comment"># 结果为true 按照ASCII码进行比较</span></span><br><span class="line">print(<span class="string">&#x27;abc&#x27;</span>&lt;<span class="string">&#x27;b&#x27;</span>) <span class="comment"># 结果为true,直接字符a,b相比得出结果</span></span><br><span class="line">print(<span class="string">&#x27;abc&#x27;</span>==<span class="string">&#x27;abc&#x27;</span>) <span class="comment"># 结果为true</span></span><br><span class="line">在数字和字符串之间做==为true,做!=比较为false</span><br></pre></td></tr></table></figure></li>
<li><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span>:逻辑与</span><br><span class="line"><span class="keyword">or</span>:逻辑或</span><br><span class="line"><span class="keyword">not</span>:逻辑非</span><br><span class="line"></span><br><span class="line"><span class="comment">#规则</span></span><br><span class="line">逻辑与规则:只有一个运算数是<span class="literal">False</span>,结果就为<span class="literal">False</span></span><br><span class="line">逻辑或规则:只有一个运算数是<span class="literal">True</span>,结果就为<span class="literal">True</span></span><br><span class="line">优先级:<span class="keyword">not</span> &gt; <span class="keyword">and</span> &gt; <span class="keyword">or</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#逻辑运算符的取值问题(逻辑运算结果不一定是bool值)</span></span><br><span class="line">print(<span class="number">3</span> <span class="keyword">and</span> <span class="string">&#x27;Hello&#x27;</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span>) </span><br><span class="line"><span class="comment"># 结果为0(按照逻辑与的运算规则,有False则False)</span></span><br><span class="line">print(<span class="number">3</span> <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 结果为3,逻辑或运算当有一个是True时，后面的将不会被执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#逻辑运算符的短路问题</span></span><br><span class="line"><span class="number">4</span> &gt; <span class="number">3</span> <span class="keyword">and</span> print(<span class="string">&#x27;hello world&#x27;</span>) </span><br><span class="line"><span class="comment"># 打印hello world</span></span><br><span class="line"><span class="number">4</span> &gt; <span class="number">3</span> <span class="keyword">or</span> print(<span class="string">&#x27;hello world&#x27;</span>) </span><br><span class="line"><span class="comment"># print将会短路，因为逻辑或前面已经是True,后面将不会被执行</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&amp;:按位与(都为<span class="number">1</span>取<span class="number">1</span>,否则取<span class="number">0</span>)</span><br><span class="line">|:按位或(有<span class="number">1</span>取<span class="number">1</span>,否则取<span class="number">0</span>)</span><br><span class="line">^:按位异或(不同取<span class="number">1</span>,相同取<span class="number">0</span>)</span><br><span class="line">~:按位取反(<span class="number">0</span>取<span class="number">1</span>,<span class="number">1</span>取<span class="number">0</span>)</span><br><span class="line">&lt;&lt;:左移(向左移,后面补<span class="number">0</span>)</span><br><span class="line">&gt;&gt;:右移(向右移,数据会丢失)</span><br><span class="line"><span class="comment"># 左移:x左移a位结果为x乘以2的a次方</span></span><br><span class="line"><span class="comment"># 右移:x右移a位结果为x除以2的a次方(取整)</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记(第一天)</title>
    <url>/2021/04/24/java%E7%AC%94%E8%AE%B0(%E7%AC%AC%E4%B8%80%E5%A4%A9)/</url>
    <content><![CDATA[<ol>
<li>Java只有单继承，没有多继承；</li>
<li>命名规则：<br>(1)大驼峰：每个单词首字母大写；<br>(2)小驼峰：除了第一个单词首字母小写，其余都大写；</li>
<li>重载：在同一个类中，方法名相同的情况下，可以通过参数不同，参数类型不同进行重载(不能用返回值类型不同进行重载)</li>
<li>代码千万行，规范第一行；格式不规范，码农两行泪；</li>
<li>数据类型转换：<br>(1)自动类型转换：如int+double会自动转化为double；<br>(2)强制类型转换：如(int)(a+b)；<br>(3)利：可以满足数据类型的一致化；弊：会导致数据类型精度丢失，且不可逆；</li>
<li>数组两种初始化的方法：<br>(1)动态初始化：如int[] a=new int[5];<br>(2)静态初试化：如int[] a=new int[]{1,2,3};<br>注：数组的长度不可变；标准格式初始化可以拆，动态初始化和静态初始化都可以拆；</li>
<li>在java中可以用任何数据类型做参数和返回值；特别之是可以用对象作为参数和返回值；</li>
<li>在写类中对全局变量时，对于Boolean类型的取值是isName，而不是getName；</li>
<li>字符串用双引号；</li>
<li>调用自己类里的方法必须为静态方法；</li>
<li>java的内存需要划分为五个部分：<br>(1)栈：存放的都是方法中的局部变量。方法的运行一定要在栈中；<br>作用域：一旦超出作用域，立刻从栈内存当中消失；<br>(2)堆：凡是new出来的东西，都在堆当中；堆内存里面的东西都有一个地址值：16进制；堆内存里面的数据，都有默认值。规则：<br>如果是整数       默认为0<br>如果是浮点数     默认为0.0<br>如果是字符       默认为’\u0000’<br>如果是布尔       默认为false<br>如果是引用类型   默认为null<br>(3)方法区：存储.class相关信息，包含方法的信息。<br>(4)本地方法栈：与操作系统有关；<br>(5)寄存器：与CPU有关；</li>
<li>构造方法在new时被调用执行；</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>js文件的写法</title>
    <url>/2021/03/09/js%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">owner</span>)</span>&#123;</span><br><span class="line">	owner.btn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;(<span class="built_in">window</span>.test=&#123;&#125;)) <span class="comment">//test是js的文件名</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo个人博客</title>
    <url>/2021/01/03/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>下载<a href="https://nodejs.org/en/">node.js</a></li>
<li>下载<a href="https://git-scm.com/downloads">git</a></li>
<li>配置环境变量<ol>
<li>在node.js的安装目录下创建的创建两个文件夹，分别为node_global和node_cache</li>
<li>配置：此电脑/属性/高级系统设置/环境变量,先找到用户环境变量Path，然后点击编辑，新建，把node_global的绝对路径添加上去，确定</li>
<li>然后找到系统环境变量的Path,点击编辑、新建，把nodejs的安装目录的绝对路径添加上去 </li>
</ol>
</li>
<li>更换node.js的源<ol>
<li>设置淘宝镜像源<br><code>npm config set registry https://registry.npm.taobao.org</code></li>
<li>查看使用的镜像源<br><code>npm config get registry</code></li>
<li>安装淘宝镜像源<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>
</ol>
<strong>注</strong>：可以更改也可以不更改，更换成国内的源后下载速度会变快，更改后以后执行npm命令要换成cnpm</li>
</ol>
<h2 id="在本地搭建hexo"><a href="#在本地搭建hexo" class="headerlink" title="在本地搭建hexo"></a>在本地搭建hexo</h2><ol>
<li>在本地的任何一个磁盘创建一个文件夹blog(名字随意起)，为本地存储博客的文件夹</li>
<li>依次执行下列代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
<li>访问<code>http://localhost:4000</code></li>
</ol>
<h2 id="选择自己喜欢的主题"><a href="#选择自己喜欢的主题" class="headerlink" title="选择自己喜欢的主题"></a>选择自己喜欢的主题</h2><ol>
<li>打开<a href="https://hexo.io/themes/">hexo主题</a>官网，选择自己喜欢的主题下载</li>
<li>下载完成后放在博客本地的文件夹里面，路径如：F:\blog\themes</li>
<li>修改配置文件F:\blog_config.yml<br>搜索：<strong>theme</strong>关键字<br>修改theme后的主题名，例如<br><code>theme: next</code>(切记：冒号和next之间有一个空格)</li>
<li>再次访问<code>http://localhost:4000</code>，看主题是否发生了变化,若主题改变了则说明主题修改成功了。</li>
<li>此时，博客本地搭建的已经成功了！</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>学习Python遇到的坑(更新中)</title>
    <url>/2021/01/08/%E5%AD%A6%E4%B9%A0Python%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91(%E6%9B%B4%E6%96%B0%E4%B8%AD)/</url>
    <content><![CDATA[<ol>
<li><h3 id="在cmd中输入Python打开软件商店"><a href="#在cmd中输入Python打开软件商店" class="headerlink" title="在cmd中输入Python打开软件商店"></a>在cmd中输入Python打开软件商店</h3>&nbsp;&nbsp;&nbsp;&nbsp;原因：在系统环境变量和用户环境变量的<code>path</code>中，当<code>WindowsApps</code>在<code>python</code>所配置的环境变量前的时候，就会先打开<code>WindowsApps</code><br>&nbsp;&nbsp;&nbsp;&nbsp;解决方法：1.在系统环境和用户环境变量的<code>path</code>中删掉<code>WindowsApps</code>这一项；2.在系统环境和用户环境变量的<code>path</code>中将<code>WindowsApps</code>这一项移动到<code>python</code>环境变量的下面，这样<code>python</code>环境变量就会先被执行，不会造成那样的意外<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210108143304.png"></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>解决php中跨域问题</title>
    <url>/2021/01/15/%E8%A7%A3%E5%86%B3php%E4%B8%AD%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>由于同源策略，经常会出现跨域问题，只需要在php代码前加上下面这些代码即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&quot;Access-Control-Allow-Origin:*&quot;</span>);</span><br><span class="line">header(<span class="string">&#x27;Access-Control-Allow-Methods:POST&#x27;</span>);</span><br><span class="line">header(<span class="string">&#x27;Access-Control-Allow-Headers:x-requested-with, content-type&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax实现文件上传</title>
    <url>/2021/05/05/Ajax%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="1-前端demo"><a href="#1-前端demo" class="headerlink" title="1.前端demo"></a>1.前端demo</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    function btnSubmit() &#123;</span><br><span class="line">        var img &#x3D; document.getElementById(&#39;images&#39;).files[0];</span><br><span class="line">        var fd &#x3D; new FormData();</span><br><span class="line">        fd.append(&#39;FILE&#39;, img);</span><br><span class="line">        fd.append(&#39;name&#39;, &#39;xiaoming&#39;);</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: &quot;post&quot;,</span><br><span class="line">            url: &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php&quot;,</span><br><span class="line">            processData: false,&#x2F;&#x2F;非常重要，不可省略</span><br><span class="line">            contentType: false,&#x2F;&#x2F;非常重要，不可省略</span><br><span class="line">            dataType: &quot;json&quot;,</span><br><span class="line">            data: fd,</span><br><span class="line">            success: function(data) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            error: function(data) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h1 id="2-服务端demo"><a href="#2-服务端demo" class="headerlink" title="2.服务端demo"></a>2.服务端demo</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$imgName&#x3D;$_FILES[&#39;FILE&#39;][&#39;name&#39;];</span><br><span class="line">$tmp_name&#x3D;$_FILES[&#39;FILE&#39;][&#39;tmp_name&#39;];</span><br><span class="line">$fileName&#x3D;&#39;.&#x2F;123.jpg&#39;;</span><br><span class="line">$rst&#x3D;move_uploaded_file($tmp_name,$fileName);</span><br><span class="line">echo $rst;</span><br></pre></td></tr></table></figure>
<p>注：<br>1.$fileName路径中的路径必须存在；<br>2.$fileName路径中不可出现中文；<br>若不满足则两种情况，可能会false；</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>解决innerHTML不能解析数据</title>
    <url>/2021/01/15/%E8%A7%A3%E5%86%B3innerHTML%E4%B8%8D%E8%83%BD%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>当使用<code>document.(&#39;div&#39;).innerHTML=`` </code>向页面追加内容时可能会出现变量不解析的情况。<br>正确姿势：<code>=</code>后面是<code>``</code>,而不是单引号或双引号,只有<code>``</code>才能解析。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">document.querySelector(&#x27;div&#x27;).innerHTML=`<span class="tag">&lt;<span class="name">h2</span>&gt;</span>编号：$&#123;resp.id&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>`	</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Python可变数据类型和不可变数据类型</title>
    <url>/2021/01/12/Python%E5%8F%AF%E5%8F%98%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>Python中的数据分为可变数据类型和不可变数据类型</p>
<h3 id="可变数据类型"><a href="#可变数据类型" class="headerlink" title="可变数据类型"></a>可变数据类型</h3><p>定义：如果修改值，内存地址不会发生变化<br>可变数据类型:列表,字典,集合</p>
<h3 id="不可变数据类型"><a href="#不可变数据类型" class="headerlink" title="不可变数据类型"></a>不可变数据类型</h3><p>定义：如果修改值，内存地址会发生变化<br>可变数据类型:字符串,数字,元组</p>
<h3 id="看图理解"><a href="#看图理解" class="headerlink" title="看图理解"></a>看图理解</h3><p><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210111164602.png"><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210111165444.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
