<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python学习(1 day)</title>
    <url>/2021/01/08/Python%E5%AD%A6%E4%B9%A0(1%20day)/</url>
    <content><![CDATA[<h2 id="Pycharm基本使用"><a href="#Pycharm基本使用" class="headerlink" title="Pycharm基本使用"></a>Pycharm基本使用</h2><h2 id="Pycharm基本语法"><a href="#Pycharm基本语法" class="headerlink" title="Pycharm基本语法"></a>Pycharm基本语法</h2><ol>
<li>注释<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"><span class="comment"># ptint(&quot;Hello Python&quot;)  //用# 或ctrl+/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多行注释</span></span><br><span class="line"><span class="comment"># print(&quot;你好&quot;)</span></span><br><span class="line"><span class="comment"># print(&quot;您好&quot;) //先选中，然后用Ctrl+/</span></span><br></pre></td></tr></table></figure></li>
<li>变量<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 变量直接赋值</span></span><br><span class="line">msg=<span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>input输入<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg=<span class="built_in">input</span>(<span class="string">&quot;请输入&quot;</span>)</span><br><span class="line"><span class="comment"># msg为变量名</span></span><br><span class="line"><span class="comment"># input括号里为输入提示信息</span></span><br></pre></td></tr></table></figure></li>
<li>del删除<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span>(msg)</span><br><span class="line"><span class="comment"># msg：删除的变量名</span></span><br></pre></td></tr></table></figure></li>
<li>标识符规则</li>
</ol>
<ul>
<li>由字母，数字，下划线组成</li>
<li>开头不能是数字</li>
<li>不能是Python关键字</li>
</ul>
<ol start="6">
<li>数据类型</li>
</ol>
<ul>
<li>str(字符串)</li>
<li>Number(数字)<ul>
<li>整数</li>
<li>浮点数</li>
<li>复数<code>msg=1+2j</code></li>
</ul>
</li>
<li>bool(布尔值)</li>
<li>None(空值)</li>
<li>list(列表)</li>
<li>tuple(元组)</li>
<li>dict(字典)</li>
<li>set(集合)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用type获取数据类型</span></span><br><span class="line">msg=<span class="number">123</span></span><br><span class="line">print(<span class="built_in">type</span>(a))</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="7">
<li>数据运算符的分类(与C语言一直的省略)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求幂 **</span></span><br><span class="line">print(<span class="number">2</span>**<span class="number">3</span>) <span class="comment"># 2的3次幂</span></span><br><span class="line"><span class="comment"># 取整 //</span></span><br><span class="line">print(<span class="number">12</span>//<span class="number">5</span>) <span class="comment"># 12对5取整</span></span><br></pre></td></tr></table></figure></li>
<li>符合运算符(写法与C一致)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=a+b</span><br><span class="line">等价于</span><br><span class="line">a+=b</span><br></pre></td></tr></table></figure></li>
<li>关系运算符(与C一致)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">== != &gt; &lt; &gt;= &lt;=</span><br></pre></td></tr></table></figure></li>
<li>常用位运算符(将数字转化为二进制进行运算)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&amp; <span class="comment"># 按位与</span></span><br><span class="line">| <span class="comment"># 按位或</span></span><br><span class="line">^ <span class="comment"># 按位异或</span></span><br><span class="line">~ <span class="comment"># 按位取反</span></span><br><span class="line">&lt;&lt; <span class="comment"># 左移位</span></span><br><span class="line">&gt;&gt; <span class="comment"># 右移位</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+PicGo+gitee图床</title>
    <url>/2021/01/05/hexo-PicGo-gitee%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p><strong>前言</strong>：我尝试了好几种床图，不是在电脑端加载不出来，就是有各种各样的限制，最后找到了gitee，因为服务器在国内，访问速度也是比较快，空间也没有限制，算是比较理想的一种吧。一开始我用vscode+PicGo插件，等到快成的时候，图片是上传上去了，但是加载不出来，我尝试了<code>sm.ms</code>和<code>github</code>，最后抛弃了<code>vsCode+PicGo</code>插件，选择了<code>PicGo客户端和gitee</code>。</p>
<ol>
<li><strong>注册gitee账号</strong><br>去官网注册账号<a href="https://gitee.com/">gitee</a></li>
<li><strong>新建gitee仓库</strong><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203048.png"><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203450.png"></li>
<li><strong>获得gitee的token</strong><br>登录<code>gitee</code>官网，点击头像/设置/私人令牌/生成令牌<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105203902.png"><br>点击提交后复制生成的令牌，在配置的时候要使用</li>
<li><strong>下载gitee</strong><br>点击<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>下载，有不同的版本，都可以<br>下载成功后按照提示默认安装即可</li>
<li><strong>配置gitee</strong><br>默认状态下PicGo是没有<code>gitee</code>，因此先安装插件<code>gitee-uploader</code><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105205151.png"><br>这时，点击图床设置，已经有<code>gitee图床</code>的设置<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105205522.png"> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1:打开新建的仓库，看地址栏，若地址栏为https:&#x2F;&#x2F;gitee.com&#x2F;A&#x2F;B,则需要填A&#x2F;B</span><br><span class="line">2:默认为master就可以</span><br><span class="line">3:把刚才生成的token粘贴到这里</span><br><span class="line">4:path为创建的仓库存放图片的文件夹名，可以为image，可任意填写</span><br><span class="line">5:其余开心就好</span><br></pre></td></tr></table></figure></li>
<li><strong>升华</strong><br>为更方便地获取截图外链，安装<code>picgo-plugin-quick-capture</code>,实现截图上传一步搞定</li>
<li><strong>Typora+PicGo+gitee配置</strong><br>如果用<code>Typora</code>写<code>Markdown</code>文章，还需要对<code>Typora</code>进行配置，找到<code>文件/偏好设置/图像</code><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105212825.png"><br>在typora中，当插入本地图片时，会自动转换成gitee外链</li>
</ol>
<p><strong>tips</strong></p>
<ol>
<li>通过上面的操作已经实现了快速上传和快速截图上传功能，当我们要用本地图片生成外链时，先复制一下本地图片(就是选中图片按下Ctrl+c),然后按下快速上传的快捷键，此时外链已经生成，在需要插入图片的位置Ctrl+V就可以了</li>
<li>当使用快速截图上传时，如果是直接截图的话，截完图后直接Ctrl+V就可以了，但如果是截完图后需要写批注，那么截的图并不一定可以自动上传，需要按下快速上传的快捷键，然后再Ctrl+V</li>
<li>通过PicGo可以查看和删除上传的图片<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105212411.png"></li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>PicGo</tag>
        <tag>gitee</tag>
        <tag>Typora</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo插入图片</title>
    <url>/2021/01/05/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><ol>
<li>在blog的本地文件的根目录中打开git Bash，然后执行<br><code>    npm install hexo-asset-image --save</code></li>
<li>打开blog根目录下的配置文件_config.yml，修改<br><code>post_asset_folder: true  //由false改为true</code><br>此时，当执行<code>hexo n 文章名</code>的时候，会在_post目录下新建同名的一个文件夹和一个后缀名为<code>.md</code>的文件<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105173654.png"><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105173920.png"></li>
<li>打开<code>/node_modules/hexo-asset-image/index.js</code> 用下面代码替换<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line">var cheerio &#x3D; require(&#39;cheerio&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14480345&#x2F;how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version &#x3D; String(hexo.version).split(&#39;.&#39;);</span><br><span class="line">hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;</span><br><span class="line">  var config &#x3D; hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">        var link &#x3D; data.permalink;</span><br><span class="line">    if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)</span><br><span class="line">       var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1;</span><br><span class="line">    else</span><br><span class="line">       var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;</span><br><span class="line">    &#x2F;&#x2F; In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;...&#x2F;about&#x2F;index.html&quot;.</span><br><span class="line">    var endPos &#x3D; link.lastIndexOf(&#39;&#x2F;&#39;) + 1;</span><br><span class="line">    link &#x3D; link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess &#x3D; [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];</span><br><span class="line">    for(var i &#x3D; 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key &#x3D; toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ &#x3D; cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#39;img&#39;).each(function()&#123;</span><br><span class="line">        if ($(this).attr(&#39;src&#39;))&#123;</span><br><span class="line">            &#x2F;&#x2F; For windows style path, we replace &#39;\&#39; to &#39;&#x2F;&#39;.</span><br><span class="line">            var src &#x3D; $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;&#x2F;&#39;);</span><br><span class="line">            if(!&#x2F;http[s]*.*|\&#x2F;\&#x2F;.*&#x2F;.test(src) &amp;&amp;</span><br><span class="line">               !&#x2F;^\s*\&#x2F;&#x2F;.test(src)) &#123;</span><br><span class="line">              &#x2F;&#x2F; For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.</span><br><span class="line">              &#x2F;&#x2F; In addition, to support multi-level local directory.</span><br><span class="line">              var linkArray &#x3D; link.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">                return elem !&#x3D; &#39;&#39;;</span><br><span class="line">              &#125;);</span><br><span class="line">              var srcArray &#x3D; src.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">                return elem !&#x3D; &#39;&#39; &amp;&amp; elem !&#x3D; &#39;.&#39;;</span><br><span class="line">              &#125;);</span><br><span class="line">              if(srcArray.length &gt; 1)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src &#x3D; srcArray.join(&#39;&#x2F;&#39;);</span><br><span class="line">              $(this).attr(&#39;src&#39;, config.root + link + src);</span><br><span class="line">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">            console.info&amp;&amp;console.info($(this));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] &#x3D; $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>把自己想用的图片放在新建的文件夹(文章名的文件夹)中，在<code>test.md</code>中引用是<code>![](图片的文件名)</code><br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105183827.png"></li>
</ol>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><ol>
<li>在<code>\blog\source</code>目录下新建<code>image</code>文件夹<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105184557.png"></li>
<li>把想要插入的图片都放入<code>image</code>文件夹下</li>
<li>在插入图片的位置引用<code>![](/image/图片名)</code>即可</li>
</ol>
<p><strong>注</strong>：按照这种方式插入可能会在本地图片加载不出来，上传后就可以加载出来了；若上传后还加载不出来，检查blog根目录下的配置文件<code>_config.yml</code>的<code>post_asset_folder:</code>是否为<code>false</code></p>
<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>用图床实现插入图片，也是最推荐的一种，具体见<a href="https://romanticqq.top/2021/01/05/hexo-PicGo-gitee%E5%9B%BE%E5%BA%8A/">hexo+PicGo+gitee图床</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>图床</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo绑定域名</title>
    <url>/2021/01/05/hexo%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<ol>
<li><strong>注册域名</strong><br>可以挑选<a href="https://cloud.tencent.com/">腾讯云</a>或<a href="https://www.aliyun.com/">阿里云</a>，或则其余任何一家进行域名注册</li>
<li><strong>获取github仓库IP</strong><br>打开<code>cmd</code>,<code>ping 仓库名.github.io</code>,获取IP<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105215709.png"><br>我的这个ping的有点问题，但方法没错</li>
<li><strong>域名和IP绑定</strong><br>找到控制台，点解析<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105220220.png"><br>然后点击修改，按照下面图片提示<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105220540.png"></li>
<li><strong>创建CNAME文件</strong><br>在<code>blog/source</code>目录创建<code>CNAME(无后缀名)</code>,把申请的域名填入即可<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105215242.png"></li>
<li><strong>域名和github仓库绑定</strong><br>打开存放博客的仓库，点击<code>settings</code>,找到<br><img src="https://gitee.com/light_trap/for-picgo/raw/master/image/20210105214939.png"><br>在输入框输入申请的域名，然后点击<code>save</code></li>
<li><strong>访问</strong><br>域名，IP，https://仓库名.github.io，三则都可访问</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署</title>
    <url>/2021/01/04/hexo%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ol>
<li>注册github账号(有github账号的可跳过)</li>
<li>登录后，新建一个代码仓库名为：github账号名.github.io,权限为public</li>
<li>实现git和github的链接<ol>
<li>鼠标右键打开git Bash Here</li>
<li>在git Bash Here中设置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure></li>
<li> 然后再输入，获取密钥<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot; </span><br></pre></td></tr></table></figure>
按照提示默认下一步，生成两个文件，按照所给出的路径，用记事本打开id_rsa.pub，并复制</li>
<li>打开github的settings/SSH and GPG keys<br>点击SSH keys旁边的新建，在Title处给密钥起一个名字，并把密钥粘贴到Key处，</li>
<li>输入<code> ssh -T git@github.com</code>判断git和github是否连接成功</li>
</ol>
</li>
<li>添加提交设置：打开blog/_config.yml在最后添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git   </span><br><span class="line">repo: https:&#x2F;&#x2F;github.com&#x2F;Romanticqq&#x2F;romanticqq.github.io.git &#x2F;&#x2F;提交的github仓库地址</span><br><span class="line">branch: master &#x2F;&#x2F;分支名</span><br></pre></td></tr></table></figure></li>
<li>进行部署 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &#x2F;&#x2F;清理public的内容</span><br><span class="line">hexo g &#x2F;&#x2F;生成静态内容</span><br><span class="line">hexo d  &#x2F;&#x2F;部署上传</span><br><span class="line">可能在上传时会报错，此时需要执行下面一句命令行</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>访问<br>在浏览器地址栏输入<code>https://仓库名.github.io</code>,即可访问</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo备份与恢复</title>
    <url>/2021/01/04/hexo%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><ol>
<li>在github的博客仓库创建新的分支<strong>backup</strong></li>
<li>打开git Bash Here，输入 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure></li>
<li>添加提交设置：打开blog/_config.yml在最后添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">backup:</span><br><span class="line">type: git</span><br><span class="line">repository:</span><br><span class="line">github: git@github.com:Romanticqq&#x2F;romanticqq.github.io.git,backup(提交的github地址,分支名)</span><br></pre></td></tr></table></figure></li>
<li>当要对代码备份时，执行<code>hexo d</code>即备份成功</li>
</ol>
<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><ol>
<li>把github的博客仓库<strong>backup</strong>分支的内容下载到本地</li>
<li>依次执行下列命令 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure></li>
<li>本地文件恢复，<code>hexo s</code>开启本地服务，在浏览器输入<code>http://localhost:4000</code>测试是否正常</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo个人博客</title>
    <url>/2021/01/03/%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>下载<a href="https://nodejs.org/en/">node.js</a></li>
<li>下载<a href="https://git-scm.com/downloads">git</a></li>
<li>配置环境变量<ol>
<li>在node.js的安装目录下创建的创建两个文件夹，分别为node_global和node_cache</li>
<li>配置：此电脑/属性/高级系统设置/环境变量,先找到用户环境变量Path，然后点击编辑，新建，把node_global的绝对路径添加上去，确定</li>
<li>然后找到系统环境变量的Path,点击编辑、新建，把nodejs的安装目录的绝对路径添加上去 </li>
</ol>
</li>
<li>更换node.js的源<ol>
<li>设置淘宝镜像源<br><code>npm config set registry https://registry.npm.taobao.org</code></li>
<li>查看使用的镜像源<br><code>npm config get registry</code></li>
<li>安装淘宝镜像源<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>
</ol>
<strong>注</strong>：可以更改也可以不更改，更换成国内的源后下载速度会变快，更改后以后执行npm命令要换成cnpm</li>
</ol>
<h2 id="在本地搭建hexo"><a href="#在本地搭建hexo" class="headerlink" title="在本地搭建hexo"></a>在本地搭建hexo</h2><ol>
<li>在本地的任何一个磁盘创建一个文件夹blog(名字随意起)，为本地存储博客的文件夹</li>
<li>依次执行下列代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
<li>访问<code>http://localhost:4000</code></li>
</ol>
<h2 id="选择自己喜欢的主题"><a href="#选择自己喜欢的主题" class="headerlink" title="选择自己喜欢的主题"></a>选择自己喜欢的主题</h2><ol>
<li>打开<a href="https://hexo.io/themes/">hexo主题</a>官网，选择自己喜欢的主题下载</li>
<li>下载完成后放在博客本地的文件夹里面，路径如：F:\blog\themes</li>
<li>修改配置文件F:\blog_config.yml<br>搜索：<strong>theme</strong>关键字<br>修改theme后的主题名，例如<br><code>theme: next</code>(切记：冒号和next之间有一个空格)</li>
<li>再次访问<code>http://localhost:4000</code>，看主题是否发生了变化,若主题改变了则说明主题修改成功了。</li>
<li>此时，博客本地搭建的已经成功了！</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo优化配置(更新中)</title>
    <url>/2021/01/07/hexo%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE(%E6%9B%B4%E6%96%B0%E4%B8%AD)/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>学习Python遇到的坑(更新中)</title>
    <url>/2021/01/08/%E5%AD%A6%E4%B9%A0Python%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91(%E6%9B%B4%E6%96%B0%E4%B8%AD)/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
